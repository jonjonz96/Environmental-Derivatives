##QUESTIONS/ISSUES/UPDATES FOR NEXT SUPERVISOR MEETING JULY 20TH -----

#graphs
#poster


#introduction 2-3 paragraphs just on sustainalility?  int
#BIOMASS SENSITIVITY GRAPH ISSUE
#START OF WRITING
#MLE RESEARCH ---For example a 5% change in a parameter will lead to 10% change in the option price. 
                 #So, if sigma is assigned as 0.30 a benchmark, then this will correspond to the new number as 0%. 
                 #A sigma of 0.40 will correspond to 33.33% (since (0.4-0.3)/0.3 = 1/3 change). If this is clear, 
                 #I can briefly describe this revision when we skype on Saturday. 
                 #The plan is to use MLE for the joint model. In this case you need to form a likelihood function 
                 #for a bivariate normal random variable with an embedded correlation coefficient. 



##PIONNEERING PAPER?
##FORMATTING FONT
















##QUESTIONS/ISSUES/UPDATES FOR NEXT SUPERVISOR MEETING JULY 9TH ----

ok# for the american indicator put option calculations, what is the difference in between LS and ordinary? TO my knowledge, ordinary doesnt give shit
ok# for american options different time steps, must use the simpson rule, right?
ok# simpson interest rate formula possible error
ok# exp(-r_s) possible error
ok## Which way to write the put price formula


ok##show results of american put for different time steps, explain how I got the interest rate


ok##Bootstrapping






##QUESTIONS/ISSUES/UPDATES FOR SUPERVISOR MEETING JUNE 30TH  ----

#ok#****INTEREST RATE HAS A MISTAKE.. MUST TRANSFER THE ANNUALLY ESTIMATED INTEREST RATE INTO A DAILY DAILY INTEREST RATE *****
#ok#Question: interest rate is yearly.. Should I provide the annually interest rate estimated daily to the simpson formula and then reconvert to daily interest rate? Or transform all rates to daily and then feed to simpson function?
##Question: why are we looking at interest rate and not discount factors instead? under risk neutral measure framework. The approriate cost of capital is the proxy for risk free instrument, which is the interest rate
## benchmark is risk free rate.
#ok#Question: when looking at the VaR, we look at payoffs. Should these payoffs be discounted or not?

#ok#Q: Is 0 included when looking at negative payoffs only?
#ok#Go over meaning of the quantiles
#ok#Go over by-path and least squares MC american put options: paper re-do, 2-order-for-me, 10-order-for-me. Go over CI, SE, etc.
#ok#go over errors
#ok#Go over moneyness anaylsis
#ok#plot(put_prices_strike_sensitivity_df$strike,put_prices_strike_sensitivity_df$calculated.put.price, main = "calculated put price w.r.t. moneyness ratio", xlab = "strike", ylab = "calculated put price", type = "l")
#ok#go over the y-change of the sensitivity graphs, inquiry: the graph "line" is the same, except for the axis.
#ok#Question: VaR payoffs analysis: must the payoffs be discounted or not? And only one interest rate or many? we can if we want to compare it with price
#ok#Question: how to get CI for VaR?











##QUESTIONS/ISSUES/UPDATES FOR SUPERVISOR MEETING JUNE 21st ----

##why are we modelling interest rates instead of a discount rate / opportunity cost rate, similar to the environmental derivatives paper?
#make sure: for the sensitivity analysis, must fix a,b and sigma of bond price, and vary \alpha, \beta and \sigma of interest rate
##for the interest rate sensitivity analysis, now that we are looking at the effect on the bond prices, why though should we turn to the sensitivity analysis of a,b and bond_sigma instead of the interest rate alpha, beta and sigma
##lookback options?
##Propose idea for VaR: order the payoffs through quantile and that yields result automatically
#why should be need to create an emperical distribtion for VaR? I don't get it!
plot(put_prices_correlation_sensitivity_df$correlation, 100*put_prices_correlation_sensitivity_df$mean_put_price, type= "l", main = "mean put price for varying correlation", xlab = " correlation", ylab = "mean put price")
plot(put_prices_growthrate_sensitivity_df$growth_rate_sensitivity, 100*put_prices_growthrate_sensitivity_df$mean_put_price_gr, type= "l", main = "mean put price for varying growth_rate")














##QUESTIONS/ISSUES/UPDATES FOR SUPERVISOR MEETING JUNE 13TH ----
#-Schedule next meeting, preferably on Thursday June 18th

ok#-job options
ok#-go over what was done
ok##--simpson interest rate
ok##--sensitivity analysis for interest rate, on sigma and alpha
ok##--calculation and grapg of put optins
OK#-focuson put's counter-part and control variable.. no idea where to start

ok##explain on how I obtained payoff probability, how I obtained c, the indicator payoff function : indicator_payoff = mean(payoffs) * length(indicator) / sum(indicator)


OK#question: when I do the control variable for the put option, is this contact the hedging option?







#plots

#note:graphs are based on int rate, not of simpson's rate

#look at bond price -> DON'T NEED 

plot(int_rate_sigma_sensitivity$sigma_sensitivity,int_rate_sigma_sensitivity$int_rate_avg, type = "l", main = "vasicek mean interest rate sigma sensitivity, increase of 0.25%")
plot(int_rate_alpha_sensitivity$alpha_sensitivity,int_rate_alpha_sensitivity$int_rate_avg, main = "interest rate alpha sensitivity")
plot(int_rate_beta_sensitivity$beta_sensitivity,int_rate_beta_sensitivity$int_rate_avg, type = "l", main = "interest rate beta sensitivity")
plot(simps_rate_10000)
plot(biomass, type = "l", ylab ="biomass (tonne/m^3)", xlab = "time (d)", main = "example path of euler appox of K / biomass")
plot(m_stock_sln[126,], main ="10000 terminal values of K of milstein approx")

plot(put_price_int_rate_sensitivity$int_rate, put_price_int_rate_sensitivity$mean.put.price, main = "put price, varying int rate")

plot(indicator_put_price_int_rate_sensitivity$int_rate, indicator_put_price_int_rate_sensitivity$mean.put.price, type = "l", main = "indicator put prices, varying sigma")

plot(put_prices_sigma_sensitivity_df$sigma_sensitivity, put_prices_sigma_sensitivity_df$mean_put_price, type= "l", main = "mean put price for varying sigma")




















##QUESTIONS/ISSUES/UPDATES FOR SUPERVISOR MEETING MAY  31ST -----

#-calculate price of put
#-where does sigma come in for price of put
#-are we pricing put as a black scholes? If so, there is no payoff to calculate?
#how to hedge: consider importance sampling, control variable, perhaps mixtures of these.
#dates  / deadlines
#big job opportunity






##QUESTIONS/ISSUES/UPDATES FOR SUPERVISOR MEETING MAY  22ND -----

#difference in bond CI vs true value : due to interest rate
#ARMA FOR POISSON
#Modelling of effort (number of boats)
#2-FACTOR MODELS.. How to create the dW...STILL DON'T GET IT! 
#how to construct put
#discount the x of main xde.. use the average of 10,000 interest rate? Only take the final element?
dw2 = c(0,rnorm(126,mean = 0, sd = sqrt(1/126)))
dw3 = c(0,rnorm(126,mean = 0, sd = sqrt(1/126)))
cor(dw2,dw3)

norm1 = rnorm(500,0,1)
norm2 = rnorm(500,0,1)
cor(norm1,norm2)





## libraries -----
install.packages("sde")
library(sde)
install.packages("VGAM")
library(VGAM)

#https://financetrain.com/binomial-option-pricing-model-in-r/

#install.packages("LSMonteCarlo")
#library(LSMonteCarlo)

#help(LSMonteCarlo)



## INTEREST RATE functions -----




#VASICEK
#volatility 0.10 
#dr_t = \alpha * (\beta  - r_t) dt + \sigma * dW_t
#0.0463
# mean level 3 to 7 
#check treasury bill for 6month rate

vasicek <- function(alpha, beta, sigma, r0 = 0.05, T){
  daily_sigma = (1+sigma)^(1/252)-1
  
  if   (T == 0.5)  t= 126
  if   (T == 1.0)  t= 252
  
  dw_r = c(0, rnorm(t-1,mean = 0, sd = sqrt(1/t)))
  
  v <- rep(0, t)
  v[1] <- r0
  for (i in 2:t){
    v[i] <- v[i - 1] + alpha * (beta - v[i - 1]) + daily_sigma * dw_r[i]
  }
  return(list(r=v, dw=dw_r))
}
set.seed(251079926)
interest_rate = vasicek(0.025,0.0463,0.25,0.05,0.5)
plot(interest_rate, type = "l")

interest_rate = vasicek(0.025,0.0463,0.1,0.05,0.5)$r
interest_rate_1y = vasicek(0.025,0.0463,0.1,0.05,1)$r

simpson_interest_rate = function(int_rate_vector, T){
  
  if   (T == 0.5)  t= 126
  if   (T == 1.0)  t= 252
  
  simspon_integral_approx =int_rate_vector[1]
  
  for (i in 2:t) { 
    
    if (i%%2 == 0 & i!=t) simspon_integral_approx = simspon_integral_approx + 4 * int_rate_vector[i]  
    if (i%%2 == 1 & i!=t) simspon_integral_approx = simspon_integral_approx + 2 * int_rate_vector[i]
    
    
    if (i == t) simspon_integral_approx = simspon_integral_approx + int_rate_vector[i]
    
  }
  
  
  simspon_integral_approx = (1/t) * (1/3) * simspon_integral_approx
  
  
  return(simspon_integral_approx)
}


simpson_interest_rate(interest_rate_1y,1)

simpson_interest_rate_time_step(interest_rate_1y)

simpson_interest_rate_time_step = function(int_rate_vector){
  
  t = length(int_rate_vector)
  
  #if   (T == 0.5)  t= 126
  #if   (T == 1.0)  t= 252
  
  
  simspon_integral_approx =int_rate_vector[1]
  
  for (i in 2:t) { 
    
    if (i%%2 == 0 & i!=t) simspon_integral_approx = simspon_integral_approx + 4 * int_rate_vector[i]  
    if (i%%2 == 1 & i!=t) simspon_integral_approx = simspon_integral_approx + 2 * int_rate_vector[i]
    
    
    if (i == t) simspon_integral_approx = simspon_integral_approx + int_rate_vector[i]
    
  }
  
  
  simspon_integral_approx = (1/t) * (1/3) * simspon_integral_approx
  
  
  return(simspon_integral_approx)
}






simpson_interest_rate_attempt_roge = function(int_rate_vector, T){
  
  if   (T == 0.5)  t= 126
  if   (T == 1.0)  t= 252
  
  simspon_integral_approx =int_rate_vector[1]
  
  for (i in 2:t) { 
    
    if (i%%2 == 0 & i!=t) simspon_integral_approx = simspon_integral_approx + 4 * int_rate_vector[i]  
    if (i%%2 == 1 & i!=t) simspon_integral_approx = simspon_integral_approx + 2 * int_rate_vector[i]
    
    
    if (i == t) simspon_integral_approx = simspon_integral_approx + int_rate_vector[i]
    
  }
  
  delta_x = 1/252
  
  simspon_integral_approx = delta_x * (1/3) * simspon_integral_approx
  
  
  return(simspon_integral_approx)
}






##Interest rate sensitivity

##varying sigma graph for int_rate
#sigma : 0.01-0.45, interval 0.005 => 90 rounds
#x_int_rate = c()
y_int_rate = c()
std_dev_int_rate = c()
mins_int_rate = c()
maxs_int_rate = c()
#sigma_int_rate = c()
parameter = c()

#for (index in 1:90){
#  int_rate_sigma = replicate(10000, simpson_interest_rate(vasicek(0.025,0.0463,(index/2)/100,0.05,0.5)$r,0.5))
#  
#  parameter = append(parameter,(index/2)/100)
#  #sigma = append(sigma, sigma_1/100)
#  y_int_rate = append(y_int_rate, mean(int_rate_sigma))
#  std_dev_int_rate= append(std_dev_int_rate,sd(int_rate_sigma))
#  mins_int_rate = append(mins_int_rate, min(int_rate_sigma))
#  maxs_int_rate = append(maxs_int_rate, max(int_rate_sigma))
#}


#sensitivity of terminal interest rate in 6 months w.r.t. sigma
#do it for the bond.. use the analytic solution
system.time(
for (index in 1:180){
  int_rate_sigma = replicate(10000, simpson_interest_rate(vasicek(0.025,0.0463,(index/4)/100,0.05,0.5)$r,0.5))
  
  parameter = append(parameter,(index/4)/100)
  #sigma = append(sigma, sigma_1/100)
  y_int_rate = append(y_int_rate, mean(int_rate_sigma))
  std_dev_int_rate= append(std_dev_int_rate,sd(int_rate_sigma))
  mins_int_rate = append(mins_int_rate, min(int_rate_sigma))
  maxs_int_rate = append(maxs_int_rate, max(int_rate_sigma))
} )
#user  system elapsed 
#207.63    0.03  207.81 

int_rate_sigma_sensitivity = data.frame("sigma_sensitivity" = parameter, "int_rate_avg"=y_int_rate, "int_rate_sd" = std_dev_int_rate, "min" = mins_int_rate, "max" = maxs_int_rate)

remove(parameter, y_int_rate, std_dev_int_rate, mins_int_rate, maxs_int_rate, int_rate_sigma, index)
head(int_rate_sigma_sensitivity)
plot(int_rate_sigma_sensitivity$sigma_sensitivity,int_rate_sigma_sensitivity$int_rate_avg, type = "l", main = "vasicek mean interest rate sigma sensitivity, increase of 0.25%")


#alpha
#x_int_rate_alpha = c()
y_int_rate_alpha = c()
std_dev_int_rate_alpha = c()
mins_int_rate_alpha = c()
maxs_int_rate_alpha = c()
#sigma_int_rate_alpha = c()
parameter_alpha = c()
system.time(
for (index in 1:150){
  int_rate_alpha = replicate(10000, simpson_interest_rate(vasicek(index/1000,0.0463,0.1,0.05,0.5)$r,0.5))
  
  parameter_alpha = append(parameter_alpha,index/1000)
  #sigma = append(sigma, sigma_1/100)
  y_int_rate_alpha = append(y_int_rate_alpha, mean(int_rate_alpha))
  std_dev_int_rate_alpha= append(std_dev_int_rate_alpha,sd(int_rate_alpha))
  mins_int_rate_alpha = append(mins_int_rate_alpha, min(int_rate_alpha))
  maxs_int_rate_alpha = append(maxs_int_rate_alpha, max(int_rate_alpha))
}
)
#user  system elapsed 
#170.97    0.03  171.00 
int_rate_alpha_sensitivity = data.frame("alpha_sensitivity" = parameter_alpha, "int_rate_avg"=y_int_rate_alpha, "int_rate_sd" = std_dev_int_rate_alpha, "min" = mins_int_rate_alpha, "max" = maxs_int_rate_alpha)
remove(parameter_alpha,y_int_rate_alpha,std_dev_int_rate_alpha,mins_int_rate_alpha,maxs_int_rate_alpha,int_rate_alpha, index)
head(int_rate_alpha_sensitivity)

plot(int_rate_alpha_sensitivity$alpha_sensitivity,int_rate_alpha_sensitivity$int_rate_avg, type = "l", main = "interest rate alpha sensitivity")


#beta
x_int_rate_beta = c()
y_int_rate_beta = c()
std_dev_int_rate_beta = c()
mins_int_rate_beta = c()
maxs_int_rate_beta = c()
sigma_int_rate_beta = c()
parameter_beta = c()

system.time(
  for (index in 100:900){
  int_rate_beta = replicate(10000, simpson_interest_rate(vasicek(0.025,index/10000,0.1,0.05,0.5)$r,0.5))
  
  parameter_beta = append(parameter_beta,index/1000)
  #sigma = append(sigma, sigma_1/100)
  y_int_rate_beta = append(y_int_rate_beta, mean(int_rate_beta))
  std_dev_int_rate_beta= append(std_dev_int_rate_beta,sd(int_rate_beta))
  mins_int_rate_beta = append(mins_int_rate_beta, min(int_rate_beta))
  maxs_int_rate_beta = append(maxs_int_rate_beta, max(int_rate_beta))
} )

#user  system elapsed 
#934.03    0.34  936.67

int_rate_beta_sensitivity = data.frame("beta_sensitivity" = parameter_beta, "int_rate_avg"=y_int_rate_beta, "int_rate_sd" = std_dev_int_rate_beta, "min" = mins_int_rate_beta, "max" = maxs_int_rate_beta)
remove(x_int_rate_beta,y_int_rate_beta,std_dev_int_rate_beta,mins_int_rate_beta,maxs_int_rate_beta,sigma_int_rate_beta,parameter_beta, index,int_rate_beta)

head(int_rate_beta_sensitivity)
plot(int_rate_beta_sensitivity$beta_sensitivity,int_rate_beta_sensitivity$int_rate_avg, type = "l", main = "interest rate beta sensitivity")
#graph is a constant increasing line



#CIR
#dr_t = \alpha * (\beta  - r_t) dt + \sigma * sqrt(r_t) * dW_t

cir <- function(alpha, beta, sigma, n = 1000, r0 = 0.05){
  daily_sigma = (1+sigma)^(1/252)-1
  
  z = rnorm(252/2,0,1)
  
  v <- rep(0, n)
  v[1] <- r0
  for (i in 2:n){
    v[i] <- v[i - 1] + alpha * (beta - v[i - 1]) + daily_sigma * sqrt(v[i-1]) *rnorm(1)
  }
  return(v)
}

rr = cir(0.2,0.2,0.1,252,0.045)
plot(rr, type = "l")

#Hull White
#dr_t = (\theta(t) - \alpha(t) * r(t) ) dt + \sigma(t) *dW(t)





## General Shit -----



#https://www.youtube.com/watch?v=5BpOYPNxWsA&list=PLRj8HuwfWZEsXW2pzAwAWYC8EZbD2ieOq&index=5&t=0s
install.packages("yuima")
library("yuima")
require(yuima)



m1 = setModel(drift = "theta*(mu-x)", diffusion = "sigma", state.var ="x", time.var= "t", solve.var = "x", xinit = 0.5)
X = simulate(m1, true.parameter = list(mu=0.1, sigma = 0.2, theta = 5))
plot(X)


#SImulate SDE given data:
#https://www.youtube.com/watch?v=xVzvw7yadHw&list=PLRj8HuwfWZEsXW2pzAwAWYC8EZbD2ieOq&index=9&t=0s




avg_int_rate = replicate(1000000,vasicek(0.025,0.0463,0.10,T,r0=0.05))
avg_int_rate = mean(avg_int_rate)


## BOND PRICING investigation  -----

bond_price_function = function(a,b,sigma,T,t) {
  
  a=1;b=1;sigma=0.1;T=0.5;t=0
  
  
  if   (T == 0.5)  n= 126
  if   (T == 1.0)  n= 252
  #if (n == 126) {int_rate = vasicek(0.025,0.0463,0.10,T,r0=0.05)$r
  #r = int_rate[n]}
  #
  #if (n == 252) {int_rate = vasicek(0.025,0.0463,0.10,T,r0=0.05)$r
  #r = int_rate[n]}
  
  if (n == 126) r = simpson_interest_rate(vasicek(0.025,0.0463,0.4,0.05,0.5)$r, 0.5)
  if (n == 126) r = simpson_interest_rate(vasicek(0.025,0.0463,0.4,0.05,1.0)$r, 1.0)
  
  A = (1-exp(-a*(T-t)))/a
  D = (b-(sigma^2)/(2*a^2))*(A- (T-t)) - (sigma^2*A^2)/(4*a)
  
  BB = exp(D-A*r)
  
  Y_price = - log(BB, exp(1))/(T-t)
  return(Y_price) }


bond_price_function(1,1,0.20,0.5,0)

bond_prices <- replicate(10000,bond_price_function(1,1,0.2,0.5,0), simplify = TRUE)
bond_prices_avg = mean(bond_prices) ; bond_prices_avg
t.test(bond_prices) ; sd(bond_prices)
#standard error
bond_price_standard_error = sd(bond_prices) / sqrt(10000-1) ; bond_price_standard_error
#CI
bond_prices_avg - 1.96*bond_price_standard_error ; bond_prices_avg + 1.96*bond_price_standard_error

bond_prices_1000000 <- replicate(1000000,bond_price_function(1,1,0.2,0.5,0), simplify = TRUE)
bond_prices_1000000_avg = mean(bond_prices_1000000) ; bond_prices_1000000_avg
t.test(bond_prices_1000000) ; sd(bond_prices_1000000)
#standard error
bond_price_1000000_standard_error = sd(bond_prices_1000000) / sqrt(1000000-1) ; bond_price_1000000_standard_error
#CI
bond_prices_1000000_avg - 1.96*bond_price_1000000_standard_error ; bond_prices_1000000_avg + 1.96*bond_price_1000000_standard_error
bond_prices_1000000_avg - 2.33*bond_price_1000000_standard_error ; bond_prices_1000000_avg + 2.33*bond_price_1000000_standard_error


#TRUE VALUE
aa=1 ; tt=0 ; TT=0.5 ; sigmaa = 0.2 ; bb=1 ; 
AA = (1-exp(-aa*(TT-tt)))/aa
DD = (bb-(sigmaa^2)/(2*aa^2))*(AA- (TT-tt)) - (sigmaa^2*AA^2)/(4*aa)
BB = exp(DD-AA*0.05)
true_bond_price = -log(BB, exp(1)) / (TT-tt) ; true_bond_price #0.2488327

par(mfrow=c(1,2))
plot(int_rate)
plot(bond_prices)

bonds = c(aa,bb,AA,BB,DD.bond_prices_avg,bond_price_standard_error, bond_prices_1000000_avg,bond_price_1000000_standard_error)
names(bonds) = c("aa value", "bb value", "AA", "BB", "DD", "bonf prices avg", "1m bond prices  avg", "1m bond prices SE")
remove(aa,bb,AA,BB,DD,bond_prices_avg,bond_price_standard_error, bond_prices_1000000_avg,bond_price_1000000_standard_error)
remove(tt,TT,sigmaa,DD)
bonds

## INTEREST RATE SENSITIVITY ANALYSIS BASED ON BOND PRICING ----

## GENERAL SHIT 2 -----





#Set Initial Values
K = 10^6 #carrying capacity (tonnes)
r = 0.71  #intrinsic growth rate (1/year)
q = 0.0001 #catchability coefficientt (1/year * 1/SFU)
x_min = 0.4*K #min viable pop. level (tonnes)
p = 0.5 #unit harvest price ($ / tonne) 
T = 1 # Terminal time (year)
E_max = r/q #Max effort (SFU)




r=0.71;
q=.0001;
K=10^6;
time_step = 1/252
E_max = r/q
dw = rnorm(252,mean = 0, sd = 1)

sde.sim(N=252,delta=1/252,drift=r*x*(1-x/K)-q*E*x, sigma = sigma_1*x*dw)


install.packages("glarma")
library("glarma")

library(MASS)

rpois(252,50)
themodel = arima(flow, order = c(1,0,0), seasonal = list(order = c(0,1,1), period = 12))
themodel



## Set Initial Values for main SDE -----
K1 = 10^6 #carrying capacity (tonnes)
r1 = 0.71  #intrinsic growth rate (1/year)
q1 = 0.0001 #catchability coefficientt (1/year * 1/SFU)
x_min1 = 0.4*K #min viable pop. level (tonnes)
p1 = 0.5 #unit harvest price ($ / tonne) 
T1 = 0.5 # Terminal time (year)
E_max1 = r/q #Max effort (SFU)

E1=50


E1 = rpois(126,50)


#Euler approximation

yyy=c(rep(5,50))
x=1



## EULER APPROXIMATION with some senstitivity analysis -----


euler_approx_sln = function(x0,dt,sigma_1, min_K, K,r,q,effort,T, correlation) {

  if   (T == 0.5)  t= 126
  if   (T == 1.0)  t= 252
  
  q = c(rep(q,t))
  
  if   (effort == 1)  E = rpois(t,20)
  if   (effort == 2)  E = c(rep(25,t))
  
  x_sol = c(x0)
  x_min = min_K*x_sol[1]
  
  interest_rate_and_BM = vasicek(0.025,0.0463,0.1,0.05,T)
  dw_r = interest_rate_and_BM$dw
  int_rate = interest_rate_and_BM$r
  
  if (correlation == 0) dw_1 = c(0, c(rnorm(t-1,mean = 0, sd = sqrt(1/t))))
  if (correlation != 0) {
    
    dw_3 = c(0, rnorm(t-1,mean = 0, sd = sqrt(1/t)))
    rho = correlation
    dw_1 = rho*dw_r + sqrt(1-rho**2)*dw_3    }
  
  for (i in 1:(t-1)) {
    if (x_sol[i] < x_min) {
      {for (index in i:i+20)
        q[i] = q[i]/2}}
    x_sol[i+1] = x_sol[i] + (r * (1-x_sol[i]/K) - q[i]*E[i]) * x_sol[i] * dt + sigma_1*x_sol[i]*dw_1[i]}
  return(x_sol)}


biomass = euler_approx_sln(10,1/252,sigma_1=0.3,min_K=0.4, K=K1,r=r1,q=q1,effort=2,correlation = 0, T=0.5)

biomass_sln = replicate(10000, euler_approx_sln(10,1/252,sigma_1=0.3,min_K=0.4, K=K1,r=r1,q=q1,effort=2,correlation = 0, T=0.5), simplify = TRUE)

plot(biomass_sln[,1], type = "l", ylab ="Biomass (tonne/m^3)", xlab = "Time (Days)", main = "Example Biomass Stock Sample Paths", ylim = c(5,25))


lines(biomass_sln[,841], col = 2)
lines(biomass_sln[,2], col = 3)
lines(biomass_sln[,859], col = 4)
lines(biomass_sln[,874], col = 5)
lines(biomass_sln[,990], col = 6)
lines(biomass_sln[,937], col = 7)

head(biomass_sln_ggplot_df)

biomass_sln_ggplot_df = data.frame("x"= 1:126, "1" = biomass_sln[,1], 
                                          "2" = biomass_sln[,2], 
                                          "3" = biomass_sln[,841], 
                                          "44" = biomass_sln[,859], 
                                          "5" = biomass_sln[,874], 
                                          "6" = biomass_sln[,990], 
                                          "7" = biomass_sln[,937])
library(ggplot2)
library(reshape2)
ggplot(melt(biomass_sln_ggplot_df, id.vars = "x"), 
       aes(x = x, y = value, color = variable)) +
  theme_bw() +  geom_line() + labs(y=expression("Biomass (tonne/m"^3*")"), x= "Time (days)") + 
  theme(plot.title = element_text(hjust = 0.5)) + ggtitle("6-month example biomass stock sample paths") + 
  theme(legend.position = "none") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), 
       axis.line=element_line(colour = "black")) + scale_x_continuous(expand = c(0,0))





biomass_sln_1 = replicate(10000, euler_approx_sln(10,0.001,sigma_1=0.2,min_K=0.4, K=K1,r=r1,q=q1,effort=1,correlation = 0, T=1), simplify = TRUE)



max(biomass_sln_1[252,])


min(biomass_sln_1[252,])
which(biomass_sln_1[252,] > 22)

biomass_sln_1_ggplot_df = data.frame("x"= 1:252, "1" = biomass_sln_1[,430], 
                                   "2" = biomass_sln_1[,776], 
                                   "3" = biomass_sln_1[,3105], 
                                   "44" = biomass_sln_1[,83], 
                                   "5" = biomass_sln_1[,128], 
                                   "6" = biomass_sln_1[,9999], 
                                   "7" = biomass_sln[,4500])

ggplot(melt(biomass_sln_1_ggplot_df, id.vars = "x"), 
       aes(x = x, y = value, color = variable)) +
  theme_bw() +  geom_line() + labs(y=expression("Biomass (tonne/m"^3*")"), x= "Time (days)") + 
  theme(plot.title = element_text(hjust = 0.5)) + ggtitle("1-year example biomass stock sample paths") + 
  theme(legend.position = "none") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), 
                                          axis.line=element_line(colour = "black")) + scale_x_continuous(expand = c(0,0))




interest_rate_and_BM_test = vasicek(0.025,0.0463,0.1,0.05,1)
plot(interest_rate_and_BM_test$dw)
plot(interest_rate_and_BM_test$r)

##r1=0.71
r1=0.71
#effort = 1 (poisson)
#Change in sigma from 25% to 20%
stock_sln_sigma_0.1 = replicate(10000, euler_approx_sln(10,0.001,sigma_1=0.2,min_K=0.4, K=K1,r=r1,q=q1,effort=1,T=0.5), simplify = TRUE)
min(stock_sln_sigma_0.1);max(stock_sln_sigma_0.1)
t.test(stock_sln_sigma_0.1)
plot(stock_sln_sigma_0.1, type = "l")


#Change in sigma from 25% to 40%
stock_sln_sigma_0.4 = replicate(10000, euler_approx_sln(10,0.001,sigma_1=0.4,min_K=0.4,K=K1,r=r1,q=q1,effort=1,T=0.5), simplify = TRUE)
min(stock_sln_sigma_0.4);max(stock_sln_sigma_0.4)
t.test(stock_sln_sigma_0.4)

#Change in sigma from 25% to 70%
stock_sln_sigma_0.7 = replicate(10000, euler_approx_sln(10,0.001,sigma_1=0.7,min_K=0.4,K=K1,r=r1,q=q1,effort=1,T=0.5), simplify = TRUE)
min(stock_sln_sigma_0.7);max(stock_sln_sigma_0.7)
t.test(stock_sln_sigma_0.7)


#effort = 2 (constant)
#Change in sigma from 25% to 10%
stock_sln_sigma_0.1 = replicate(10000, euler_approx_sln(10,0.001,sigma_1=0.1,min_K=0.4,K=K1,r=r1,q=q1,effort=2,T=0.5), simplify = TRUE)
min(stock_sln_sigma_0.1);max(stock_sln_sigma_0.1)
t.test(stock_sln_sigma_0.1)

#Change in sigma from 25% to 40%
stock_sln_sigma_0.4 = replicate(10000, euler_approx_sln(10,0.001,sigma_1=0.4,min_K=0.4,K=K1,r=r1,q=q1,effort=2,T=0.5), simplify = TRUE)
min(stock_sln_sigma_0.4);max(stock_sln_sigma_0.4)
t.test(stock_sln_sigma_0.4)

#Change in sigma from 25% to 70%
stock_sln_sigma_0.7 = replicate(10000, euler_approx_sln(10,0.001,sigma_1=0.7,min_K=0.4,K=K1,r=r1,q=q1,effort=2,T=0.5), simplify = TRUE)
min(stock_sln_sigma_0.7);max(stock_sln_sigma_0.7)
t.test(stock_sln_sigma_0.7)



##r1= 0.3
r1=0.3
#effort = 1 (poisson)
#Change in sigma from 25% to 10%
stock_sln_sigma_0.1 = replicate(10000, euler_approx_sln(10,0.001,sigma_1=0.1,min_K=0.4,K=K1,r=r1,q=q1,effort=1,T=0.5), simplify = TRUE)
min(stock_sln_sigma_0.1);max(stock_sln_sigma_0.1)
t.test(stock_sln_sigma_0.1)

#Change in sigma from 25% to 40%
stock_sln_sigma_0.4 = replicate(10000, euler_approx_sln(10,0.001,sigma_1=0.4,min_K=0.4,K=K1,r=r1,q=q1,effort=1,T=0.5), simplify = TRUE)
min(stock_sln_sigma_0.4);max(stock_sln_sigma_0.4)
t.test(stock_sln_sigma_0.4)

#Change in sigma from 25% to 70%
stock_sln_sigma_0.7 = replicate(10000, euler_approx_sln(10,0.001,sigma_1=0.7,min_K=0.4,K=K1,r=r1,q=q1,effort=1,T=0.5), simplify = TRUE)
min(stock_sln_sigma_0.7);max(stock_sln_sigma_0.7)
t.test(stock_sln_sigma_0.7)


#effort = 2 (constant)
#Change in sigma from 25% to 10%
stock_sln_sigma_0.1 = replicate(10000, euler_approx_sln(10,0.001,sigma_1=0.1,min_K=0.4,K=K1,r=r1,q=q1,effort=2,T=0.5), simplify = TRUE)
min(stock_sln_sigma_0.1);max(stock_sln_sigma_0.1)
t.test(stock_sln_sigma_0.1)

#Change in sigma from 25% to 40%
stock_sln_sigma_0.4 = replicate(10000, euler_approx_sln(10,0.001,sigma_1=0.4,min_K=0.4,K=K1,r=r1,q=q1,effort=2,T=0.5), simplify = TRUE)
min(stock_sln_sigma_0.4);max(stock_sln_sigma_0.4)
t.test(stock_sln_sigma_0.4)

#Change in sigma from 25% to 70%
stock_sln_sigma_0.7 = replicate(10000, euler_approx_sln(10,0.001,sigma_1=0.7,min_K=0.4,K=K1,r=r1,q=q1,effort=2,T=0.5), simplify = TRUE)
min(stock_sln_sigma_0.7);max(stock_sln_sigma_0.7)
t.test(stock_sln_sigma_0.7)


mean_terminal_biomass = c()





##biomass sigma sensitivity   initial is 0.30 

mean_terminal_biomass_s = c()
sigma = c()

system.time(  
  for (index in 1:100){
    biomass_sigma = replicate(10000, euler_approx_sln(10,1/252,sigma_1=index/100,min_K=0.4, K=K1,r=r1,q=q1,effort=1,correlation = 0, T=0.5), simplify = TRUE)
    sigma = append(sigma,index/100)
    mean_terminal_biomass_s = append(mean_terminal_biomass_s, mean(biomass_sigma[126,]))
  })
#user  system elapsed 
#85.47    0.21   85.80    122.71    0.28  123.15 


mean_terminal_biomass_s= c(rep(NA,length(correlation)-length(mean_terminal_biomass_s)), mean_terminal_biomass_s)




mean_terminal_biomass_sigma_true = c()
sigma_true = c()

system.time(  
  for (index in 1:60){
    biomass_sigma = replicate(10000, euler_approx_sln(10,1/252,sigma_1=index/100,min_K=0.4, K=K1,r=r1,q=q1,effort=1,correlation = 0, T=0.5), simplify = TRUE)
    sigma_true = append(sigma_true,index/100)
    mean_terminal_biomass_sigma_true = append(mean_terminal_biomass_sigma_true, mean(biomass_sigma[126,]))
  })
mean_terminal_biomass_sigma_true = mean_terminal_biomass_sigma_true[-1]
sigma_true = sigma_true[-1]


plot(sigma_true,mean_terminal_biomass_sigma_true, type= "l")

sigma_true[30]


percentage_change_biomass_s_biomass = c()
for (i in 1:60) percentage_change_biomass_s_biomass = append(percentage_change_biomass_s_biomass, mean_terminal_biomass_sigma_true[i]/mean_terminal_biomass_sigma_true[30]-1)

percentage_change_biomass_s = c()
for (i in 1:60) percentage_change_biomass_s = append(percentage_change_biomass_s, sigma_true[i]/sigma_true[30]-1)

plot(100*percentage_change_biomass_s, 100*percentage_change_biomass_s_biomass, type = "l")



biomass_sigma_sensitivity_graph_data = data.frame(x=100*percentage_change_biomass_s,y=100*percentage_change_biomass_s_biomass)

ggplot(biomass_sigma_sensitivity_graph_data) + 
  geom_line(aes(x=x, y=y)) +
  theme_bw() +
  labs(y = expression("Relative change (%) in the biomass x(T) (tonne/m"^3*")"), 
       x = expression(atop("\n Relative change (%) in sigma", "Sigma " (sigma)))) +
  ggtitle(expression('Sensitivity analysis of termnial biomass level w.r.t. sigma '(sigma)*'; '*sigma[0]*'=30%')) +
  scale_x_continuous(breaks = seq(-100,100,50), labels = c("-100 \n 0.0", "-50 \n 0.15","0 \n 0.30","50 \n 0.45", "100 \n 0.60"))+
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  theme(panel.background = element_blank(), axis.line=element_line(colour = "black")) +
  theme(axis.text.x = element_text(size=11), axis.text.y = element_text(size=11))
















  
library(ggplot2)

plot(correlation,mean_terminal_biomass_c, type = "l", xlab = "Parameter Value", ylab = expression('Terminal Biomass Level X '[T] ), main = "Figure 2: Biomass sensitivity analysis for different biomass parameters")
par(new=TRUE)
plot(mean_terminal_biomass_s, col = "orange", type = "l", ylab = " ", xlab = " ", xaxt = "n", yaxt = "n")
par(new=TRUE)
plot(mean_terminal_biomass_g, col = "blue", type = "l", ylab = " ", xlab = " ", xaxt = "n", yaxt = "n")
axis(side=4)
legend("topleft", 
       legend=c(expression("Growth (g): Blue; g" %in% "[-1,1] [RS]"),
                expression("Correlation "*(rho)*": Black; "*rho %in% "[-1,1] [LS]"), 
                expression("Sigma "*(sigma)*": Orange; "*sigma %in% "[0,1] [LS]")), cex = 0.8)


expression("Sigma " (sigma))
xlab = expression("Correlation " (rho))

at=pretty(range(mean_terminal_biomass_s)))
par(new=TRUE)
plot(mean_terminal_biomass_s, col = "blue", type = "l", ylab = " ", xlab = " ", xaxt = "n", yaxt = "n")

legend("topleft", legend=c("Growth: Black","Correlation: Green", "Sigma: Blue"), cex = 0.8)

head(df_c)
head(df_g)
head(df_s)

library("manip")
rescale(1:100)

max(mean_terminal_biomass_c)
max(mean_terminal_biomass_g)
max(mean_terminal_biomass_s)

min(mean_terminal_biomass_c)
min(mean_terminal_biomass_g)
min(mean_terminal_biomass_s)



mean_terminal_biomass_g_2 = (((max(mean_terminal_biomass_c)-min(mean_terminal_biomass_c))*(mean_terminal_biomass_g - min(mean_terminal_biomass_g))  )/(max(mean_terminal_biomass_g)-min(mean_terminal_biomass_g))) + min(mean_terminal_biomass_c)   
df_c = data.frame(x=correlation, y=mean_terminal_biomass_c)
df_g = data.frame(x=growth/100, y=mean_terminal_biomass_g_2)
df_s = data.frame(x=c(rep(NA,101),sigma), y=mean_terminal_biomass_s)

#df_c$Parameter = "Correlation (Right Vertical Scale)"
#df_g$Parameter = "Growth (Left Vertical Scale)"
#df_s$Parameter = "Sigma (Right Vertical Scale)"

df_c$Parameter = "Correlation"
df_g$Parameter = "Growth"
df_s$Parameter = "Sigma"

df= rbind(df_c,df_g,df_s)   

ggplot(df) + geom_line(aes(x,y, colour=Parameter)) +
  labs(y = expression('Terminal Biomass Level X '[T]), x="Parameter Value") +
  theme(legend.position = c(.88,.2)) + ggtitle("Figure 2: Biomass sensitivity analysis for different biomass parameters") + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), 
        axis.line=element_line(colour = "black"))  + 
  scale_y_continuous(breaks = seq(7,12,1), labels = c("7", "8","9","10", "11", "12")) +  
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  theme(panel.background = element_blank(), axis.line=element_line(colour = "black")) +
  theme(axis.text.x = element_text(size=11), axis.text.y = element_text(size=11))


head(df_g)
ggplot(df_g) + aes(x=x, y=y) + 




  
                                 
ggplot(df, aes(x = -1:1)) + geom_line(aes(df_c, colour="Correlation"))+ geom_line(aes(x,y, colour=Parameter)) +
  geom_line(aes(y=))
  labs(y = expression('Terminal Biomass Level X '[T]), x="Parameter Value") +
  theme(legend.position = c(.75,.2)) + ggtitle("                 Sensitivity Analysis for Different Parameters") + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), 
        axis.line=element_line(colour = "black")) +
  scale_y_continuous("T", sec.axis = sec_axis(~.*0.1+14)) 





plot(cbind(mean_terminal_biomass_c,mean_terminal_biomass_s), type = "l")

plot(correlation, mean_terminal_biomass_c, type = "l")

plot(growth/100, mean_terminal_biomass_g)

mean_terminal_biomass_c = c()
correlation = c()

system.time(  
  for (index in -100:100){
    correlation=append(correlation, index/100)
    biomass_correlation = replicate(1000, euler_approx_sln(10,1/252,sigma_1=0.3,min_K=0.4, K=K1,r=r1,q=q1,effort=1,correlation = index/100, T=0.5), simplify = TRUE)
    mean_terminal_biomass_c = append(mean_terminal_biomass_c, mean(biomass_correlation[126,]))
  })

#user  system elapsed 
#24.61    0.52  24.44 
plot(correlation,mean_terminal_biomass_c, type = "l")


percentage_change = c()
for (i in 1:length(mean_terminal_biomass_c))   percentage_change=append(percentage_change,mean_terminal_biomass_c[i]/mean_terminal_biomass_c[101]-1)

plot(correlation, percentage_change, type = "l")


mean_terminal_biomass_g = c()
growth = c()

system.time(  
  for (index in 1:140){
    growth=append(growth, index)
    biomass_growth = replicate(1000, euler_approx_sln(10,1/252,sigma_1=0.3,min_K=0.4, K=K1,r=index/100,q=q1,effort=1,correlation = 0, T=0.5), simplify = TRUE)
    mean_terminal_biomass_g = append(mean_terminal_biomass_g, mean(biomass_growth[126,]))
  })


growth[70]

plot(growth, mean_terminal_biomass_g, type = "l")

percentage_change_biomass_g_biomass = c()
for (i in 1:140) percentage_change_biomass_g_biomass = append(percentage_change_biomass_g_biomass, mean_terminal_biomass_g[i]/mean_terminal_biomass_g[70]-1)

percentage_change_biomass_g = c()
for (i in 1:140) percentage_change_biomass_g = append(percentage_change_biomass_g, growth[i]/growth[70]-1)

plot(100*percentage_change_biomass_g, 100*percentage_change_biomass_g_biomass, type = "l")

biomass_growth_sensitivity_graph_data = data.frame(x=100*percentage_change_biomass_g,y=100*percentage_change_biomass_g_biomass)

ggplot(biomass_growth_sensitivity_graph_data) + 
  geom_line(aes(x=x, y=y)) +
  theme_bw() +
  labs(y = expression("Relative change (%) in the biomass x(T) (tonne/m"^3*")"), 
       x = expression(atop("\n Relative change (%) in the growth rate", "Growth rate (g) "))) +
  ggtitle(expression('Sensitivity analysis of termnial biomass level w.r.t. growth rate '(g)*'; '*g[0]*'=70%')) +
  scale_x_continuous(breaks = seq(-100,100,50), labels = c("-100 \n 0.0", "-50 \n 0.35","0 \n 0.70","50 \n 1.05", "100 \n 1.40"))+
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  theme(panel.background = element_blank(), axis.line=element_line(colour = "black")) +
  theme(axis.text.x = element_text(size=11), axis.text.y = element_text(size=11))  



#user  system elapsed 
#244.33 0.87    246.13



##varying sigma graph for K
  #x = c()
  mean_terminal_biomass_s = c()
  #std_dev = c()
  #mins = c()
  #maxs = c()
  sigma = c()
  #number = c()
  #df = data.frame()

  system.time(  
  for (index in 1:70){
    biomass_sigma = replicate(10000, euler_approx_sln(10,1/252,sigma_1=index/100,min_K=0.4, K=K1,r=r1,q=q1,effort=1,correlation = 0, T=0.5), simplify = TRUE)
    sigma = append(sigma,index/100)
    #sigma = append(sigma, sigma_1/100)
    mean_terminal_biomass_s = append(mean_terminal_biomass_s, mean(biomass_sigma[126,]))
    #std_dev= append(std_dev,sd(biomass_sigma))
    #mins = append(mins, min(biomass_sigma))
    #maxs = append(maxs, max(biomass_sigma))
  })

  #user  system elapsed 
#84.65    0.18  85.02  

  plot(sigma,mean_terminal_biomass, type = "l")
  
  
  
  
  
  
  
  
  
  par(new="T")
  lines(K_Strike_126_fixed)
    
  biomass_sigma_sensitivity = data.frame("sigma_sensitivity" = sigma, "biomass_avg"=y, "sd" = std_dev, "min" = mins, "max" = maxs)
  remove(sigma, y, std_dev, mins, maxs, index, number)
  head(biomass_sigma_sensitivity)
  plot(biomass_sigma_sensitivity$sigma_sensitivity,biomass_sigma_sensitivity$biomass_avg, type = "l")


  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

##varying correlation graph for K
  x_corr = c()
  y_corr = c()
  std_dev_corr = c()
  mins_corr = c()
  maxs_corr = c()
  sigma_corr = c()
  corr = c()
  number_corr = c()
  df_corr = data.frame()
  system.time(
  for (index in 0:100){
    biomass_correlation = replicate(10000, euler_approx_sln(10,1/252,sigma_1=0.20,min_K=0.4,K=K1,r=r1,q=q1,effort=2,correlation=index/100, T=1), simplify = TRUE)[252,]
    corr = append(corr,index/100)
    #sigma = append(sigma, sigma_1/100)
    y_corr = append(y_corr, mean(biomass_correlation))
    std_dev_corr= append(std_dev_corr,sd(biomass_correlation))
    mins_corr = append(mins_corr, min(biomass_correlation))
    maxs_corr = append(maxs_corr, max(biomass_correlation))
  })
  
  biomass_correlation_sensitivity = data.frame("correlation_sensitivity" = corr, "biomass_avg"=y_corr, "sd" = std_dev_corr, "min" = mins_corr, "max" = maxs_corr)
  remove(corr, y_corr, std_dev_corr,mins_corr,maxs_corr, index)
  head(biomass_correlation_sensitivity)
  plot(biomass_correlation_sensitivity$correlation_sensitivity,biomass_correlation_sensitivity$biomass_avg, type = "l")
  

  
  
  
  
  
  
  mean_terminal_biomass_c = c()
  correlation = c()
  
  system.time(  
    for (index in -100:100){
      correlation=append(correlation, index)
      biomass_correlation = replicate(10000, euler_approx_sln(10,1/252,sigma_1=0.3,min_K=0.4, K=K1,r=0.70,q=q1,effort=1,correlation = index/100, T=0.5), simplify = TRUE)
      mean_terminal_biomass_c = append(mean_terminal_biomass_c, mean(biomass_correlation[126,]))
    })
  
  
  correlation[101]
  
  plot(correlation, mean_terminal_biomass_c, type = "l")

  percentage_change_biomass_c_biomass = c()
  for (i in 1:length(correlation)) percentage_change_biomass_c_biomass = append(percentage_change_biomass_c_biomass, mean_terminal_biomass_c[i]/mean_terminal_biomass_c[101]-1)
  
  percentage_change_biomass_c = c()
  for (i in 1:length(correlation)) percentage_change_biomass_c = append(percentage_change_biomass_c, correlation[i])
  
  plot(percentage_change_biomass_c, 100*percentage_change_biomass_c_biomass, type = "l")
  
  biomass_correlation_sensitivity_graph_data = data.frame(x=percentage_change_biomass_c,y=100*percentage_change_biomass_c_biomass)
  
  ggplot(biomass_correlation_sensitivity_graph_data) + 
    geom_line(aes(x=x, y=y)) +
    theme_bw() +
    labs(y = expression("Relative change (%) in the biomass x(T) (tonne/m"^3*")"), 
         x = expression(atop("\n Relative change (%) in the correlation", "Correlation "(rho)))) +
    ggtitle(expression('Sensitivity analysis of termnial biomass level w.r.t. correlation '(rho)*'; '*rho[0]*'=0%')) +
    scale_x_continuous(breaks = seq(-100,100,50), labels = c("-100 \n -1.00", "-50 \n -0.50","0 \n 0.00","50 \n 0.50", "100 \n 1.00"))+
    theme(plot.title = element_text(hjust = 0.5)) +
    theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
    theme(panel.background = element_blank(), axis.line=element_line(colour = "black")) +
    theme(axis.text.x = element_text(size=11), axis.text.y = element_text(size=11))  


  
  
  
  
  
  
  
  q
  0.000001
  0.000100 #reference
  0.000200
  
  
  1/1000000
  200/1000000
  
  
  mean_terminal_biomass_qq = c()
  qq = c()
  
  system.time(  
    for (index in 1:200){
      qq=append(qq, index/1000000)
      biomass_qq = replicate(10000, euler_approx_sln(10,1/252,sigma_1=0.3,min_K=0.4, K=K1,r=0.70,q=index/1000000,effort=1,correlation = 0, T=0.5), simplify = TRUE)
      mean_terminal_biomass_qq = append(mean_terminal_biomass_qq, mean(biomass_qq[126,]))
    })
  
  
  
  qq[100]
  
  plot(qq, mean_terminal_biomass_qq, type = "l")
  
  
  percentage_change_biomass_q_biomass = c()
  for (i in 1:length(qq)) percentage_change_biomass_q_biomass = append(percentage_change_biomass_q_biomass, mean_terminal_biomass_qq[i]/mean_terminal_biomass_qq[100]-1)
  
  percentage_change_biomass_q = c()
  for (i in 1:length(qq)) percentage_change_biomass_q = append(percentage_change_biomass_q, qq[i]/qq[100] -1)
  
  
  plot(100*percentage_change_biomass_q, 100*percentage_change_biomass_q_biomass, type = "l")
  
  biomass_qq_sensitivity_graph_data = data.frame(x=percentage_change_biomass_q,y=100*percentage_change_biomass_q_biomass)
  
  ggplot(biomass_qq_sensitivity_graph_data) + 
    geom_line(aes(x=x, y=y)) +
    theme_bw() +
    labs(y = expression("Relative change (%) in the biomass x(T) (tonne/m"^3*")"), 
         x = expression(atop("\n Relative change (%) in the catchability coefficient", "Catchability coefficient "(q)))) +
    ggtitle(expression('Sensitivity analysis of termnial biomass level w.r.t. catchability coefficient q ; q'[0]*'=10'^-4)) +
    scale_x_continuous(breaks = seq(-1,1,0.50), labels = c("-100 \n 0.00000", "-50 \n 0.00005","0 \n 0.00010","50 \n 0.00015", "100 \n 0.00020"))+
    theme(plot.title = element_text(hjust = 0.5)) +
    theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
    theme(panel.background = element_blank(), axis.line=element_line(colour = "black")) +
    theme(axis.text.x = element_text(size=11), axis.text.y = element_text(size=11)) 
  
    
  
  plot(1:10, xlab=expression('hi'[5]*'there'[6]^8*'you'[2]))
  
  
  
  
  
  
  
  
  
euler_approx_sln_effort = function(x0,dt,sigma_1, min_K, K,r,q,effort,T, correlation) {
    
    if   (T == 0.5)  t= 126
    if   (T == 1.0)  t= 252
    
    q = c(rep(q,t))
    
    
    E = c(rep(effort,t))
    
    x_sol = c(x0)
    x_min = min_K*x_sol[1]
    
    interest_rate_and_BM = vasicek(0.025,0.0463,0.1,0.05,T)
    dw_r = interest_rate_and_BM$dw
    int_rate = interest_rate_and_BM$r
    
    if (correlation == 0) dw_1 = c(0, c(rnorm(t-1,mean = 0, sd = sqrt(1/t))))
    if (correlation != 0) {
      
      dw_3 = c(0, rnorm(t-1,mean = 0, sd = sqrt(1/t)))
      rho = correlation
      dw_1 = rho*dw_r + sqrt(1-rho**2)*dw_3    }
    
    for (i in 1:(t-1)) {
      if (x_sol[i] < x_min) {
        {for (index in i:i+20)
          q[i] = q[i]/2}}
      x_sol[i+1] = x_sol[i] + (r * (1-x_sol[i]/K) - q[i]*E[i]) * x_sol[i] * dt + sigma_1*x_sol[i]*dw_1[i]}
    return(x_sol)}
  
  
  mean_terminal_biomass_e = c()
  e = c()
  
  system.time(  
    for (index in 0:50){
      e=append(e, index)
      biomass_e = replicate(10000, euler_approx_sln_effort(10,1/252,sigma_1=0.3,min_K=0.4, K=K1,r=0.70,q=q1,effort=index,correlation = 0, T=0.5), simplify = TRUE)
      mean_terminal_biomass_e= append(mean_terminal_biomass_e, mean(biomass_e[126,]))
    })
  
  
  e[1]
  e[26]
  
  plot(e, mean_terminal_biomass_e, type = "l")
  
  
  percentage_change_biomass_e_biomass = c()
  for (i in 1:length(e)) percentage_change_biomass_e_biomass = append(percentage_change_biomass_e_biomass, mean_terminal_biomass_e[i]/mean_terminal_biomass_e[26]-1)
  
  percentage_change_biomass_e = c()
  for (i in 1:length(e)) percentage_change_biomass_e = append(percentage_change_biomass_e, e[i]/e[26] -1)
  
  
  plot(100*percentage_change_biomass_e, 100*percentage_change_biomass_e_biomass, type = "l")
  
  biomass_e_sensitivity_graph_data = data.frame(x=percentage_change_biomass_e,y=100*percentage_change_biomass_e_biomass)
  
  ggplot(biomass_e_sensitivity_graph_data) + 
    geom_line(aes(x=x, y=y)) +
    theme_bw() +
    labs(y = expression("Relative change (%) in the biomass x(T) (tonne/m"^3*")"), 
         x = expression(atop("\n Relative change (%) in the effort", "Effort "(E)))) +
    ggtitle(expression('Sensitivity analysis of termnial biomass level w.r.t. harvesting effort E ; E'[0]*'=25')) +
    scale_x_continuous(breaks = seq(-1,1,0.50), labels = c("-100 \n 0", "-50 \n 12.5","0 \n 25","50 \n 37.5", "100 \n 50"))+
    theme(plot.title = element_text(hjust = 0.5)) +
    theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
    theme(panel.background = element_blank(), axis.line=element_line(colour = "black")) +
    theme(axis.text.x = element_text(size=11), axis.text.y = element_text(size=11)) 
  
  
  
  
  
  
  
## MILSTEIN APPROXIMATION with some senstitivity analysis -----

milstein_approx_sln = function(x0,dt,sigma_1, min_K, K,r,q,effort,correlation,T) {
  
  if   (T == 0.5)  t= 126
  if   (T == 1.0)  t= 252
  
  q = c(rep(q,t))
  
  if   (effort == 1)  E = rpois(t,25)
  if   (effort == 2)  E = c(rep(20,t))
  
  x_sol = c(x0)
  x_min = min_K*x_sol[1]
  
  interest_rate_and_BM = vasicek(0.025,0.0463,0.1,0.05,T)
  dw_r = interest_rate_and_BM$dw #dw_r is the BM that drives the interest rate
  int_rate = interest_rate_and_BM$r
  
  
  if (correlation == 0) dw_1 = c(0, c(rnorm(t-1,mean = 0, sd = sqrt(1/252))))
  
  if (correlation != 0) {
    
    dw_3 = c(0, rnorm(t-1,mean = 0, sd = sqrt(1/252))) #this BM_3 is an independent BM from dw_r
    rho = correlation
    dw_1 = rho*dw_r + sqrt(1-rho**2)*dw_3 #dw_1 is the BM that drives the biomass
  }
  
  
  for (i in 1:(t-1)) {
    if (x_sol[i] < x_min) {
      {for (index in i:i+20)
        q[i] = q[i]/2}
    }
    x_sol[i+1] = x_sol[i] + (r * (1-x_sol[i]/K) - q[i]*E[i]) * x_sol[i] * dt + sigma_1*x_sol[i]*dw_1[i]  + 0.5*x_sol[i]*sigma_1*sigma_1*(dw_1[i]**2-dt)
      }
  return(x_sol)
}


m_stock = milstein_approx_sln(10,0.001,sigma_1=0.25,min_K=0.4, K=K1,r=r1,q=q1,effort=2,correlation=0,T=1/2)

plot(m_stock, type = "l")


m_stock_sln = replicate(10000, milstein_approx_sln(10,0.001,sigma_1=0.25,min_K=0.4, K=K1,r=r1,q=q1,effort=1,T=0.5, correlation = 0.8), simplify = TRUE)
min(m_stock_sln);max(m_stock_sln)
t.test(m_stock_sln)
plot(m_stock_sln[126,], "10000 terminal values of K of milstein approx")


##r1=0.71
r1=0.71
#effort = 1 (poisson)
#Change in sigma from 25% to 10%
m_stock_sln_sigma_0.1 = replicate(10000, milstein_approx_sln(10,0.001,sigma_1=0.1,min_K=0.4,K=K1,r=r1,q=q1,effort=1,T=0.5), simplify = TRUE)
min(m_stock_sln_sigma_0.1);max(m_stock_sln_sigma_0.1)
t.test(m_stock_sln_sigma_0.1)

#Change in sigma from 25% to 40%
m_stock_sln_sigma_0.4 = replicate(10000, milstein_approx_sln(10,0.001,sigma_1=0.4,min_K=0.4,K=K1,r=r1,q=q1,effort=1,T=0.5), simplify = TRUE)
min(m_stock_sln_sigma_0.4);max(m_stock_sln_sigma_0.4)
t.test(m_stock_sln_sigma_0.4)

#Change in sigma from 25% to 70%
m_stock_sln_sigma_0.7 = replicate(10000, milstein_approx_sln(10,0.001,sigma_1=0.7,min_K=0.4,K=K1,r=r1,q=q1,effort=1,T=0.5), simplify = TRUE)
min(m_stock_sln_sigma_0.7);max(m_stock_sln_sigma_0.7)
t.test(m_stock_sln_sigma_0.7)


#effort = 2 (constant)
#Change in sigma from 25% to 10%
m_stock_sln_sigma_0.1 = replicate(10000, milstein_approx_sln(10,0.001,sigma_1=0.1,min_K=0.4,K=K1,r=r1,q=q1,effort=2,T=0.5), simplify = TRUE)
min(m_stock_sln_sigma_0.1);max(m_stock_sln_sigma_0.1)
t.test(m_stock_sln_sigma_0.1)

#Change in sigma from 25% to 40%
m_stock_sln_sigma_0.4 = replicate(10000, milstein_approx_sln(10,0.001,sigma_1=0.4,min_K=0.4,K=K1,r=r1,q=q1,effort=2,T=0.5), simplify = TRUE)
min(m_stock_sln_sigma_0.4);max(m_stock_sln_sigma_0.4)
t.test(m_stock_sln_sigma_0.4)

#Change in sigma from 25% to 70%
m_stock_sln_sigma_0.7 = replicate(10000, milstein__approx_sln(10,0.001,sigma_1=0.7,min_K=0.4,K=K1,r=r1,q=q1,effort=2,T=0.5), simplify = TRUE)
min(m_stock_sln_sigma_0.7);max(m_stock_sln_sigma_0.7)
t.test(m_stock_sln_sigma_0.7)



##r1= 0.3
r1=0.3
#effort = 1 (poisson)
#Change in sigma from 25% to 10%
m_stock_sln_sigma_0.1 = replicate(10000, milstein_approx_sln(10,0.001,sigma_1=0.1,min_K=0.4,K=K1,r=r1,q=q1,effort=1,T=0.5), simplify = TRUE)
min(m_stock_sln_sigma_0.1);max(m_stock_sln_sigma_0.1)
t.test(m_stock_sln_sigma_0.1)

#Change in sigma from 25% to 40%
m_stock_sln_sigma_0.4 = replicate(10000, milstein_approx_sln(10,0.001,sigma_1=0.4,min_K=0.4,K=K1,r=r1,q=q1,effort=1,T=0.5), simplify = TRUE)
min(m_stock_sln_sigma_0.4);max(m_stock_sln_sigma_0.4)
t.test(m_stock_sln_sigma_0.4)

#Change in sigma from 25% to 70%
m_stock_sln_sigma_0.7 = replicate(10000, milstein_approx_sln(10,0.001,sigma_1=0.7,min_K=0.4,K=K1,r=r1,q=q1,effort=1,T=0.5), simplify = TRUE)
min(m_stock_sln_sigma_0.7);max(m_stock_sln_sigma_0.7)
t.test(m_stock_sln_sigma_0.7)


#effort = 2 (constant)
#Change in sigma from 25% to 10%
m_stock_sln_sigma_0.1 = replicate(10000, milstein_approx_sln(10,0.001,sigma_1=0.1,min_K=0.4,K=K1,r=r1,q=q1,effort=2,T=0.5), simplify = TRUE)
min(m_stock_sln_sigma_0.1);max(m_stock_sln_sigma_0.1)
t.test(m_stock_sln_sigma_0.1)

#Change in sigma from 25% to 40%
m_stock_sln_sigma_0.4 = replicate(10000, milstein_approx_sln(10,0.001,sigma_1=0.4,min_K=0.4,K=K1,r=r1,q=q1,effort=2,T=0.5), simplify = TRUE)
min(m_stock_sln_sigma_0.4);max(m_stock_sln_sigma_0.4)
t.test(m_stock_sln_sigma_0.4)

#Change in sigma from 25% to 70%
m_stock_sln_sigma_0.7 = replicate(10000, milstein_approx_sln(10,0.001,sigma_1=0.7,min_K=0.4,K=K1,r=r1,q=q1,effort=2,T=0.5), simplify = TRUE)
min(m_stock_sln_sigma_0.7);max(m_stock_sln_sigma_0.7)
t.test(m_stock_sln_sigma_0.7)
























## PUT Option Simulation and Indicator Put Option Price calculations  -----


#way 1: consider all terminal values as S_T's, fixing the Strike to be the average of these
##NOT GOOD

#calculating many terminal biomass levels using euler approximation:
#strike_K = mean(terminal_value_S_T) #10.8884 #leads to a constant K (K is exercise price of put)
K_Strike_126_fixed = mean(replicate(1000000, euler_approx_sln(10,1/252,sigma_1=0.3,min_K=0.4, K=K1,r=r1,q=q1,effort=1,correlation = 0, T=0.5), simplify = TRUE)[126,])
K_Strike_126_fixed = 14.20053

K_Strike_252_fixed = mean(replicate(1000000, euler_approx_sln(10,1/252,sigma_1=0.3,min_K=0.4, K=K1,r=r1,q=q1,effort=1,correlation = 0.5, T=1), simplify = TRUE)[252,])
K_Strike_252_fixed = 20.22726


set.seed(251079926)
#biomass_for_options_t <- as.data.frame(t(biomass_for_options))
system.time(biomass_for_options <- replicate(10000, euler_approx_sln(10,1/252,sigma_1=0.3,min_K=0.4, K=K1,r=r1,q=q1,effort=1,correlation = 0, T=0.5), simplify = TRUE))
system.time(biomass_for_options_1y <- replicate(10000, euler_approx_sln(10,1/252,sigma_1=0.3,min_K=0.4, K=K1,r=r1,q=q1,effort=1,correlation = 0, T=1), simplify = TRUE))

terminal_value_S_T_126 = biomass_for_options[126,]
terminal_value_S_T_252 = biomass_for_options_1y[252,]

mean(terminal_value_S_T_126)
mean(terminal_value_S_T_252)

plot(terminal_value_S_T_126, main = "terminal value S_T's")
plot(terminal_value_S_T_252, main = "terminal value S_T's")
#user  system elapsed 
#1.94    0.00    1.95 

put_payoffs_126 = pmax((K_Strike_126_fixed - terminal_value_S_T_126),0)
mean(put_payoffs_126)

put_payoffs_252 = pmax((K_Strike_252_fixed - terminal_value_S_T_252),0)
mean(put_payoffs_252)

payoff_to_indicator = function (payoff_vector,C) {
  indicator_vector = c()
  for (i in 1:length(payoff_vector)){
    if (payoff_vector[i] > 0 )  indicator_vector[i] = 1
    if (payoff_vector[i] == 0 ) indicator_vector[i] = 0 }
  
  
  indicator_payoff_vector = c()
  for (i in 1:length(payoff_vector)){
    if (payoff_vector[i] >  0 )  indicator_payoff_vector[i] = C
    if (payoff_vector[i] <= 0 )  indicator_payoff_vector[i] = 0 }
  
  probability = c()
  for (i in 1:length(payoff_vector))
  probability = sum(indicator_vector) / length(indicator_vector)
  output = data.frame("indicator" = indicator_vector, "indicator_payoff" = indicator_payoff_vector, "probability" = probability)
  
  
 return(output)
}

discount_factors = function(interest_rate_vector) {
  vector = exp(-interest_rate_vector)
  return(vector)
}


put_payoffs_126
mean(put_payoffs_126)
indicator_payoffs_126 = payoff_to_indicator(put_payoffs_126,1) ; head(indicator_payoffs_126)

put_payoffs_252
indicator_payoffs_252 = payoff_to_indicator(put_payoffs_252,1) ; head(indicator_payoffs_252)


interest_rates_126 = replicate(10000, simpson_interest_rate(vasicek(0.025,0.0463,0.3,0.05,0.5)$r, 0.5))
discounted_factors_of_interest_rates_126 = discount_factors(interest_rates_126)

interest_rates_252 = replicate(10000, simpson_interest_rate(vasicek(0.025,0.0463,0.3,0.05,1)$r, 1))
discounted_factors_of_interest_rates_252 = discount_factors(interest_rates_252)

summary(discounted_factors_of_interest_rates_126)
summary(discounted_factors_of_interest_rates_252)


put_prices_126 = 100*discounted_factors_of_interest_rates_126 * put_payoffs_126 ; summary(put_prices_126)  ; t.test(put_prices_126)
put_prices_252 = 100*discounted_factors_of_interest_rates_252 * put_payoffs_252 ; summary(put_prices_252)  ; t.test(put_prices_252)

indicator_put_prices_126 = 100*discounted_factors_of_interest_rates_126 * indicator_payoffs_126$indicator_payoff ; t.test(indicator_put_prices_126)
indicator_put_prices_252 = 100*discounted_factors_of_interest_rates_252 * indicator_payoffs_252$indicator_payoff ; t.test(indicator_put_prices_252)

indicator_payoffs_126$probability[1]
indicator_payoffs_252$probability[1]


put_prices_126_statistics = t.test(put_prices_126) ; put_prices_126_statistics
put_prices_126_statistics$estimate
put_prices_126_statistics$conf.int #CI Bounds
put_prices_126_statistics$stderr #standard error




put_prices_126_LB_deviation_percentage = put_prices_126_statistics$conf.int[1] / put_prices_126_statistics$estimate -1 ; unname(put_prices_126_LB_deviation_percentage)
put_prices_126_UB_deviation_percentage = put_prices_126_statistics$conf.int[2] / put_prices_126_statistics$estimate -1 ; unname(put_prices_126_UB_deviation_percentage)


indicator_put_prices_126_statistics = t.test(indicator_put_prices_126) ; indicator_put_prices_126_statistics
indicator_put_prices_126_statistics$estimate
indicator_put_prices_126_statistics$conf.int #CI Bounds
indicator_put_prices_126_statistics$stderr #standard error

indicator_put_prices_126_LB_deviation_percentage = indicator_put_prices_126_statistics$conf.int[1] / indicator_put_prices_126_statistics$estimate -1 ; unname(indicator_put_prices_126_LB_deviation_percentage)
indicator_put_prices_126_UB_deviation_percentage = indicator_put_prices_126_statistics$conf.int[2] / indicator_put_prices_126_statistics$estimate -1 ; unname(indicator_put_prices_126_UB_deviation_percentage)

indicator_payoffs_126$probability[1]

##conclusion: smaller CI for indicator put options 


put_prices_252_statistics = t.test(put_prices_252) ; put_prices_252_statistics
put_prices_252_statistics$estimate
put_prices_252_statistics$conf.int #CI Bounds
put_prices_252_statistics$stderr #standard error

put_prices_252_LB_deviation_percentage = put_prices_252_statistics$conf.int[1] / put_prices_252_statistics$estimate -1 ; unname(put_prices_252_LB_deviation_percentage)
put_prices_252_UB_deviation_percentage = put_prices_252_statistics$conf.int[2] / put_prices_252_statistics$estimate -1 ; unname(put_prices_252_UB_deviation_percentage)


indicator_put_prices_252_statistics = t.test(indicator_put_prices_252) ; indicator_put_prices_252_statistics
indicator_put_prices_252_statistics$estimate
indicator_put_prices_252_statistics$conf.int #CI Bounds
indicator_put_prices_252_statistics$stderr #standard error

indicator_put_prices_252_LB_deviation_percentage = indicator_put_prices_252_statistics$conf.int[1] / indicator_put_prices_252_statistics$estimate -1 ; unname(indicator_put_prices_252_LB_deviation_percentage)
indicator_put_prices_252_UB_deviation_percentage = indicator_put_prices_252_statistics$conf.int[2] / indicator_put_prices_252_statistics$estimate -1 ; unname(indicator_put_prices_252_UB_deviation_percentage)

indicator_payoffs_252$probability[1]






system.time(
  for (i in 1:1) {
    biomass_for_options_st <- replicate(10000, euler_approx_sln(10,1/252,sigma_1=0.3,min_K=0.4, K=K1,r=r1,q=q1,effort=1,correlation = 0, T=0.5), simplify = TRUE)
    terminal_value_S_T_126_st = biomass_for_options_st[126,]
    K_Strike_126_fixed_st = mean(terminal_value_S_T_126_st)
    put_payoffs_126_st = pmax((K_Strike_126_fixed_st - terminal_value_S_T_126_st),0)
    mean(put_payoffs_126_st)
    interest_rates_126_st = replicate(10000, simpson_interest_rate(vasicek(0.025,0.0463,0.3,0.05,0.5)$r, 0.5))
    discounted_factors_of_interest_rates_126_st = discount_factors(interest_rates_126_st)
    put_prices_126_st = 100*discounted_factors_of_interest_rates_126_st * put_payoffs_126_st
    summary(put_prices_126_st)
    t.test(put_prices_126_st)
    put_prices_126_statistics_st = t.test(put_prices_126_st)
    put_prices_126_statistics_st
    put_prices_126_statistics_st$estimate
    put_prices_126_statistics_st$conf.int #CI Bounds
    put_prices_126_statistics_st$stderr #standard error
  })
remove(biomass_for_options_st,terminal_value_S_T_126_st,K_Strike_126_fixed_st,put_payoffs_126_st,interest_rates_126_st,discounted_factors_of_interest_rates_126_st,
       put_prices_126_st,put_prices_126_statistics_st)



system.time(
  for (i in 1:1) {
    biomass_for_options_st <- replicate(10000, euler_approx_sln(10,1/252,sigma_1=0.3,min_K=0.4, K=K1,r=r1,q=q1,effort=1,correlation = 0, T=1), simplify = TRUE)
    terminal_value_S_T_252_st = biomass_for_options_st[252,]
    K_Strike_252_fixed_st = mean(terminal_value_S_T_252_st)
    put_payoffs_252_st = pmax((K_Strike_252_fixed_st - terminal_value_S_T_252_st),0)
    mean(put_payoffs_252_st)
    interest_rates_252_st = replicate(10000, simpson_interest_rate(vasicek(0.025,0.0463,0.3,0.05,1)$r, 1))
    discounted_factors_of_interest_rates_252_st = discount_factors(interest_rates_252_st)
    put_prices_252_st = 100*discounted_factors_of_interest_rates_252_st * put_payoffs_252_st
    summary(put_prices_252_st)
    t.test(put_prices_252_st)
    put_prices_252_statistics_st = t.test(put_prices_252_st)
    put_prices_252_statistics_st
    put_prices_252_statistics_st$estimate
    put_prices_252_statistics_st$conf.int #CI Bounds
    put_prices_252_statistics_st$stderr #standard error
  })
remove(biomass_for_options_st,terminal_value_S_T_252_st,K_Strike_252_fixed_st,put_payoffs_252_st,interest_rates_252_st,discounted_factors_of_interest_rates_252_st,
       put_prices_252_st,put_prices_252_statistics_st)











## SENSITIVITY ANALYSIS OF PUT PRICES -----





mean_payoffs = c()
max_payoff = c()
min_payoff = c()

system.time(
for (i in 1:1000) {
  terminal_value_S_T <- replicate(10000, euler_approx_sln(10,1/252,sigma_1=0.3,min_K=0.4, K=K1,r=r1,q=q1,effort=1,correlation = 0, T=0.5), simplify = TRUE)[126,]
  strike_K = K_Strike_126_fixed
  payoffs = pmax(strike_K - terminal_value_S_T,0)
  mean_payoffs = append(mean_payoffs, mean(payoffs))
  max_payoff = append(max_payoff, max(payoffs))
  min_payoff = append(min_payoff, min(payoffs))
}
)



#user   system  elapsed 
#11934.75    22.86 13136.53 


payoff_sensitivity = data.frame("mean_payoff" = mean_payoffs, "max_payoff"=max_payoff, "min_payoff" = min_payoff)
remove(mean_payoffs,max_payoff,min_payoff)
head(payoff_sensitivity)
max(payoff_sensitivity$max_payoff)
plot(payoff_sensitivity$mean_payoff)
plot(payoff_sensitivity$min_payoff)
plot(payoff_sensitivity$max_payoff)













#int rate sensitivity

payoffs_for_interest_rate = put_payoffs_126

payoffs_interest_rates = replicate(10000, simpson_interest_rate(vasicek(0.025,0.0463,0.3,0.05,0.5)$r, 0.5))

payoffs_discount_factors = exp(-payoffs_interest_rates*0.5)
min(payoffs_discount_factors) ; max(payoffs_discount_factors)
true_put_prices = payoffs_discount_factors * payoffs_for_interest_rate ; t.test(true_put_prices)
mean(true_put_prices)
sd(true_put_prices)/sqrt(10000-2) #standard error
mean(true_put_prices)-1.96*sd(true_put_prices)/sqrt(10000-2)




int_rate_put_price_sensitivity_f = c()
put_prices_int_rate_sensitivity_f = c()
mean_put_price_f = c()
sd_put_price_f = c()
#standard_error_put_price_f = c()
#max_put_price_f = c()
#min_put_price_f = c()


3000/100000
40000/100000
system.time(
  for (index in 3000:40000) {
    put_prices_int_rate_sensitivity_f = exp(-(index/100000)*0.5) * payoffs_for_interest_rate
    int_rate_put_price_sensitivity_f = append(int_rate_put_price_sensitivity_f, index/100000)
    mean_put_price_f = append(mean_put_price_f, mean(put_prices_int_rate_sensitivity_f))
    #sd_put_price = append(sd_put_price, sd(put_prices_int_rate_sensitivity))
    #standard_error_put_price = append(standard_error_put_price, sd(put_prices_int_rate_sensitivity) / sqrt(10000-2))
    #max_put_price = append(max_put_price, max(put_prices_int_rate_sensitivity))
    #min_put_price = append(min_put_price, min(put_prices_int_rate_sensitivity))
  }   
)

put_prices_126_int_rate_sensitivity_f = data.frame("int_rate" = int_rate_put_price_sensitivity_f,
                                                   "mean_put_price" = mean_put_price_f)


plot(put_prices_126_int_rate_sensitivity_f$int_rate, 100*put_prices_126_int_rate_sensitivity_f$mean_put_price, main = "Calculated European Put Price w.r.t. Interest Rate", xlab = "Interest Rate (r)", ylab = "Calculated Put Price")

put_prices_126_int_rate_sensitivity_f$int_rate[2001]

percentage_change = c()
for (i in 1:length(put_prices_126_int_rate_sensitivity_f$int_rate)) percentage_change=append(percentage_change,put_prices_126_int_rate_sensitivity_f$mean_put_price[i]/put_prices_126_int_rate_sensitivity_f$mean_put_price[2001] -1)

plot(put_prices_126_int_rate_sensitivity_f$int_rate, percentage_change*100, main = "Relative Change in the Calculated European Put Price (%) w.r.t. Interest Rate, 5%=No Change", xlab = "Interest Rate (r)", ylab = "Relative Change in the Put Price (%)", type = "l")

length(percentage_change)

remove(int_rate_put_price_sensitivity_f,put_prices_int_rate_sensitivity_f, mean_put_price_f,sd_put_price_f)




put_price_int_rate_sensitivity
plot(put_price_int_rate_sensitivity$int_rate, put_price_int_rate_sensitivity$mean.put.price, main = "put price, varying int rate", ylab = "calculated put price", xlab = "int rate", type = "l")









int_rate_put_price_sensitivity = c()
put_prices_int_rate_sensitivity = c()
int_rate_mean_put_price = c()
#sd_put_price_f = c()
#standard_error_put_price_f = c()
#max_put_price_f = c()
#min_put_price_f = c()




0001/1000
0100/1000
system.time(
  for (index in 0:100) {
    put_prices_int_rate_sensitivity = exp(-(index/1000)*0.5) * payoffs_for_interest_rate * 100
    int_rate_put_price_sensitivity = append(int_rate_put_price_sensitivity, index/1000)
    int_rate_mean_put_price = append(int_rate_mean_put_price, mean(put_prices_int_rate_sensitivity))
    #sd_put_price = append(sd_put_price, sd(put_prices_int_rate_sensitivity))
    #standard_error_put_price = append(standard_error_put_price, sd(put_prices_int_rate_sensitivity) / sqrt(10000-2))
    #max_put_price = append(max_put_price, max(put_prices_int_rate_sensitivity))
    #min_put_price = append(min_put_price, min(put_prices_int_rate_sensitivity))
  }   
)

put_prices_126_int_rate_sensitivity = data.frame("int_rate" = int_rate_put_price_sensitivity,
                                                   "mean_put_price" = int_rate_mean_put_price)

plot(put_prices_126_int_rate_sensitivity, type ="l")

int_rate_put_price_sensitivity[51]

percentage_change_int_rate = c()
for (i in 1:length(put_prices_126_int_rate_sensitivity$int_rate)) percentage_change_int_rate=append(percentage_change_int_rate,put_prices_126_int_rate_sensitivity$int_rate[i]/put_prices_126_int_rate_sensitivity$int_rate[51] -1)

percentage_change_int_rate_put_price = c()
for (i in 1:length(put_prices_126_int_rate_sensitivity$mean_put_price)) percentage_change_int_rate_put_price=append(percentage_change_int_rate_put_price,put_prices_126_int_rate_sensitivity$mean_put_price[i]/put_prices_126_int_rate_sensitivity$mean_put_price[51] -1)

plot(percentage_change_int_rate,percentage_change_int_rate_put_price, type= "l")

put_prices_126_intrate_sensitivity_graph_data= data.frame(percentage_change_int_rate*100,percentage_change_int_rate_put_price*100)

ggplot(put_prices_126_intrate_sensitivity_graph_data) + 
  geom_line(aes(x=percentage_change_int_rate*100, y=percentage_change_int_rate_put_price*100)) +
  labs(y = "Relative change (%) in the put price", 
       x = expression(atop("\n Relative change (%) in the interest rate", "Interest rate (r)"))) +
  ggtitle(expression("Senstivity analysis of the 6-month European regular put price w.r.t. interest rate (r); r" [0]*"=5%")) +
  scale_x_continuous(breaks = seq(-100,100,50), labels = c("-100 \n 0.000", "-50 \n 0.025","0 \n 0.050","50 \n 0.075", "100 \n 0.100")) +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  theme(panel.background = element_blank(), axis.line=element_line(colour = "black")) +
  theme(axis.text.x = element_text(size=11), axis.text.y = element_text(size=11))




interest_rate_6m_for_graphs = replicate(10000, vasicek(0.025,0.0463,0.3,0.05,0.5)$r)
max(interest_rate_6m_for_graphs[126,])
min(interest_rate_6m_for_graphs[126,])

max(interest_rate_6m_for_graphs[63,])
min(interest_rate_6m_for_graphs[63,])


which(interest_rate_6m_for_graphs[63,] < 0.04556)



interest_rate_sln_ggplot_df = data.frame("x"= 1:126, "1" = interest_rate_6m_for_graphs[,1988], 
                                   "2" = interest_rate_6m_for_graphs[,8046], 
                                   "3" = interest_rate_6m_for_graphs[,1988], 
                                   "44" = interest_rate_6m_for_graphs[,5948], 
                                   "5" = interest_rate_6m_for_graphs[,874], 
                                   "6" = interest_rate_6m_for_graphs[,3570], 
                                   "7" = interest_rate_6m_for_graphs[,3010])
library(ggplot2)
library(reshape2)
ggplot(melt(interest_rate_sln_ggplot_df, id.vars = "x"), 
       aes(x = x, y = value, color = variable)) +
  theme_bw() +  geom_line() + labs(y=expression("Interest rate (r)"), x= "Time (days)") + 
  theme(plot.title = element_text(hjust = 0.5)) + ggtitle("6-month example interest rate sample paths") + 
  theme(legend.position = "none") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), 
                                          axis.line=element_line(colour = "black")) + scale_x_continuous(expand = c(0,0))




interest_rate_1y_for_graphs = replicate(10000, vasicek(0.025,0.0463,0.3,0.05,1)$r)
max(interest_rate_1y_for_graphs[252,])
min(interest_rate_1y_for_graphs[252,])

max(interest_rate_1y_for_graphs[126,])
min(interest_rate_1y_for_graphs[126,])


which(interest_rate_1y_for_graphs[252,] < 0.0455)
which(interest_rate_1y_for_graphs[252,] > 0.0474)
which(interest_rate_1y_for_graphs[126,] < 0.0475)
which(interest_rate_1y_for_graphs[126,] > 0.04516)



interest_rate_1y_sln_ggplot_df = data.frame("x"= 1:252, "1" = interest_rate_1y_for_graphs[,128], 
                                         "2" = interest_rate_1y_for_graphs[,8840], 
                                         "3" = interest_rate_1y_for_graphs[,2221], 
                                         "44" = interest_rate_1y_for_graphs[,4798], 
                                         "5" = interest_rate_1y_for_graphs[,874], 
                                         "6" = interest_rate_1y_for_graphs[,10], 
                                         "7" = interest_rate_1y_for_graphs[,69])
library(ggplot2)
library(reshape2)
ggplot(melt(interest_rate_1y_sln_ggplot_df, id.vars = "x"), 
       aes(x = x, y = value, color = variable)) +
  theme_bw() +  geom_line() + labs(y=expression("Interest rate (r)"), x= "Time (days)") + 
  theme(plot.title = element_text(hjust = 0.5)) + ggtitle("1-year example interest rate sample paths") + 
  theme(legend.position = "none") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), 
                                          axis.line=element_line(colour = "black")) + scale_x_continuous(expand = c(0,0))







interest_rates_126 = replicate(10000, simpson_interest_rate(vasicek(0.025,0.0463,0.3,0.05,0.5)$r, 0.5))
discounted_factors_of_interest_rates_126 = discount_factors(interest_rates_126)




int_rate_put_price_sensitivity_alpha = c()
put_prices_int_rate_sensitivity_alpha = c()
mean_put_price_alpha = c()
sd_put_price_alpha = c()
#standard_error_put_price_f = c()
#max_put_price_f = c()
#min_put_price_f = c()

#0.0100   100/10000
#0.0101   101/10000
#0.0102   102/10000
#...
#0.0250   250/10000
#...
#0.0500   500/10000

system.time(
  for (index in 100:500) {
    
    
    put_prices_int_rate_sensitivity_alpha = discount_factors(replicate(10000, simpson_interest_rate(vasicek(index/10000,0.0463,0.3,0.05,0.5)$r, 0.5))) * payoffs_for_interest_rate
    int_rate_put_price_sensitivity_alpha = append(int_rate_put_price_sensitivity_alpha, index/10000)
    mean_put_price_alpha = append(mean_put_price_alpha, mean(put_prices_int_rate_sensitivity_alpha))
    #sd_put_price = append(sd_put_price, sd(put_prices_int_rate_sensitivity))
    #standard_error_put_price = append(standard_error_put_price, sd(put_prices_int_rate_sensitivity) / sqrt(10000-2))
    #max_put_price = append(max_put_price, max(put_prices_int_rate_sensitivity))
    #min_put_price = append(min_put_price, min(put_prices_int_rate_sensitivity))
  }   
)


#user  system elapsed 
#510.46    0.93  512.80 



put_prices_126_int_rate_sensitivity_alpha = data.frame("int_rate_alpha" = int_rate_put_price_sensitivity_alpha,
                                                   "mean_put_price" = mean_put_price_alpha)

remove( int_rate_put_price_sensitivity_alpha,mean_put_price_alpha, sd_put_price_alpha, put_prices_int_rate_sensitivity_alpha)

plot(put_prices_126_int_rate_sensitivity_alpha$int_rate, 100*put_prices_126_int_rate_sensitivity_alpha$mean_put_price, type = "l", main = "Calculated European Put price .w.r.t. Interest Rate Alpha", xlab = expression("Alpha " (alpha)), ylab = "Calculated European Put Price")

0.025
put_prices_126_int_rate_sensitivity_alpha$int_rate_alpha[151]

percentage_change_y = c()
for (i in 1:length(put_prices_126_int_rate_sensitivity_alpha$int_rate_alpha)) percentage_change_y=append(percentage_change_y,put_prices_126_int_rate_sensitivity_alpha$mean_put_price[i]/put_prices_126_int_rate_sensitivity_alpha$mean_put_price[151] -1)

percentage_change_x = c()
for (i in 1:length(put_prices_126_int_rate_sensitivity_alpha$int_rate_alpha)) percentage_change_x=append(percentage_change_x, put_prices_126_int_rate_sensitivity_alpha$int_rate_alpha[i]/put_prices_126_int_rate_sensitivity_alpha$int_rate_alpha[151]-1 )

plot(put_prices_126_int_rate_sensitivity_alpha$int_rate, 100*put_prices_126_int_rate_sensitivity_alpha$mean_put_price, type = "l", main = "Calculated European Put price .w.r.t. Interest Rate Alpha", xlab = expression("Alpha " (alpha)))
plot(put_prices_126_int_rate_sensitivity_alpha$int_rate_alpha, percentage_change_y*100, main = "Relative Change in the Calculated European Put Price (%) w.r.t. Interest Rate Alpha, 2.5%=No Change", xlab = expression("Alpha " (alpha)), ylab = "Relative Change in the Put Price (%)", type = "l")
plot(percentage_change_x*100, percentage_change_y*100, main = "Relative Change in the Calculated European Put Price w.r.t. Interest Rate Alpha, 2.5%=No Change", xlab = expression("Relative Change in alpha " (alpha)), ylab = "Relative Change in the Put Price (%)", type = "l")










int_rate_put_price_sensitivity_sigma = c()
put_prices_int_rate_sensitivity_sigma = c()
mean_put_price_sigma = c()
sd_put_price_sigma = c()



#standard_error_put_price_f = c()
#max_put_price_f = c()
#min_put_price_f = c()

#0.000    
#0.005  05/1000 1
#0.010  10/1000 2   
#0.015  15/1000
#0.020  20/1000
#...
#0.30   300/1000
#...
#0.70   700/1000



system.time(
  for (index in 0:140) {
    
    put_prices_int_rate_sensitivity_sigma = discount_factors(replicate(10000, simpson_interest_rate(vasicek(0.025,0.0463,index*0.005,0.05,0.5)$r, 0.5))) * payoffs_for_interest_rate
    int_rate_put_price_sensitivity_sigma = append(int_rate_put_price_sensitivity_sigma, index*0.005)
    mean_put_price_sigma = append(mean_put_price_sigma, mean(put_prices_int_rate_sensitivity_sigma))
    #sd_put_price = append(sd_put_price, sd(put_prices_int_rate_sensitivity))
    #standard_error_put_price = append(standard_error_put_price, sd(put_prices_int_rate_sensitivity) / sqrt(10000-2))
    #max_put_price = append(max_put_price, max(put_prices_int_rate_sensitivity))
    #min_put_price = append(min_put_price, min(put_prices_int_rate_sensitivity))
  }   
)


#user  system elapsed 
#168.47    0.47  169.05 



put_prices_126_int_rate_sensitivity_sigma = data.frame("int_rate_sigma" = int_rate_put_price_sensitivity_sigma,
                                                       "mean_put_price" = mean_put_price_sigma)

remove(int_rate_put_price_sensitivity_sigma,mean_put_price_sigma, sd_put_price_sigma, put_prices_int_rate_sensitivity_sigma)

plot(put_prices_126_int_rate_sensitivity_sigma$int_rate_sigma, 100*put_prices_126_int_rate_sensitivity_sigma$mean_put_price, type = "l", main = "Calculated European Put price .w.r.t. Interest Rate Sigma", xlab = expression("Sigma " (sigma)))

0.025
put_prices_126_int_rate_sensitivity_sigma$int_rate_sigma[61]

percentage_change = c()
for (i in 1:length(put_prices_126_int_rate_sensitivity_sigma$int_rate_sigma)) percentage_change=append(percentage_change,put_prices_126_int_rate_sensitivity_sigma$mean_put_price[i]/put_prices_126_int_rate_sensitivity_sigma$mean_put_price[61] -1)

plot(put_prices_126_int_rate_sensitivity_sigma$int_rate_sigma, percentage_change*100, main = "Relative Change in the Calculated European Put Price (%) w.r.t. Interest Rate Epsilon, 30%=No Change", xlab = expression("Epsilon " (epsilon)), ylab = "Relative Change in the Put Price (%)", type = "l")















int_rate_put_price_sensitivity_beta = c()
put_prices_int_rate_sensitivity_beta = c()
mean_put_price_beta = c()
sd_put_price_beta = c()
#standard_error_put_price_f = c()
#max_put_price_f = c()
#min_put_price_f = c()

0.0200
0.0463
0.0500
...
0.0800

#0.0200   200/10000
#0.0201   201/10000
#0.0500   500/10000

system.time(
  for (index in 200:800) {
    put_prices_int_rate_sensitivity_beta = discount_factors(replicate(10000, simpson_interest_rate(vasicek(0.025,index/10000,0.3,0.05,0.5)$r, 0.5))) * payoffs_for_interest_rate
    int_rate_put_price_sensitivity_beta = append(int_rate_put_price_sensitivity_beta, index/10000)
    mean_put_price_beta = append(mean_put_price_beta, mean(put_prices_int_rate_sensitivity_beta))
    #sd_put_price = append(sd_put_price, sd(put_prices_int_rate_sensitivity))
    #standard_error_put_price = append(standard_error_put_price, sd(put_prices_int_rate_sensitivity) / sqrt(10000-2))
    #max_put_price = append(max_put_price, max(put_prices_int_rate_sensitivity))
    #min_put_price = append(min_put_price, min(put_prices_int_rate_sensitivity))
  }   
)


#user  system elapsed 
#510.46    0.93  512.80 



put_prices_126_int_rate_sensitivity_beta = data.frame("int_rate_beta" = int_rate_put_price_sensitivity_beta,
                                                       "mean_put_price" = mean_put_price_beta)

remove( int_rate_put_price_sensitivity_beta,mean_put_price_beta, sd_put_price_beta, put_prices_int_rate_sensitivity_beta)

plot(put_prices_126_int_rate_sensitivity_beta$int_rate_beta, 100*put_prices_126_int_rate_sensitivity_beta$mean_put_price, type = "l", main = "Calculated European Put price .w.r.t. Interest Rate Beta", xlab = expression("Beta " (beta)))



0.0463
0.025
put_prices_126_int_rate_sensitivity_beta$int_rate_beta[264]

percentage_change = c()
for (i in 1:length(put_prices_126_int_rate_sensitivity_beta$int_rate_beta)) percentage_change=append(percentage_change,put_prices_126_int_rate_sensitivity_beta$mean_put_price[i]/put_prices_126_int_rate_sensitivity_beta$mean_put_price[264] -1)

plot(put_prices_126_int_rate_sensitivity_beta$int_rate_beta, percentage_change*100, main = "Relative Change in the Calculated European Put Price (%) w.r.t. Interest Rate Beta, 4.63%=No Change", xlab = expression("Beta " (beta)), ylab = "Relative Change in the Put Price (%)", type = "l")































indicator_payoffs_for_interest_rate = indicator_payoffs$indicator_payoff

indicator_int_rate_put_price_sensitivity = c()
indicator_put_prices_int_rate_sensitivity = c()
indicator_mean_put_price = c()
indicator_sd_put_price = c()
indicator_standard_error_put_price = c()
indicator_max_put_price = c()
indicator_min_put_price = c()

system.time(
  for (indicator_index in 3000:40000) {
    indicator_put_prices_int_rate_sensitivity = exp(-(indicator_index/100000)*0.5) * indicator_payoffs_for_interest_rate
    indicator_int_rate_put_price_sensitivity = append(indicator_int_rate_put_price_sensitivity, indicator_index/100000)
    indicator_mean_put_price = append(indicator_mean_put_price, mean(indicator_put_prices_int_rate_sensitivity))
    indicator_sd_put_price = append(indicator_sd_put_price, sd(indicator_put_prices_int_rate_sensitivity))
    indicator_standard_error_put_price = append(indicator_standard_error_put_price, sd(indicator_put_prices_int_rate_sensitivity) / sqrt(10000-2))
    indicator_max_put_price = append(indicator_max_put_price, max(indicator_put_prices_int_rate_sensitivity))
    indicator_min_put_price = append(indicator_min_put_price, min(indicator_put_prices_int_rate_sensitivity))
  }   
)

#user  system elapsed 
#12.33    0.03   12.35 

indicator_put_price_int_rate_sensitivity = data.frame("int_rate" = indicator_int_rate_put_price_sensitivity, 
                                            "mean put price" = indicator_mean_put_price, 
                                            "std_dev" = indicator_sd_put_price, 
                                            "std_error" = indicator_standard_error_put_price,
                                            "max put price" = indicator_max_put_price,
                                            "min put prie" = indicator_min_put_price)

remove(indicator_int_rate_put_price_sensitivity,indicator_mean_put_price, indicator_sd_put_price, indicator_standard_error_put_price, indicator_max_put_price, indicator_min_put_price)

plot(indicator_put_price_int_rate_sensitivity$int_rate, 100*indicator_put_price_int_rate_sensitivity$mean.put.price, type = "l", main = "indicator put prices, varying sigma")






































##varying sigma

##varying BIOMASS sigma graph for K put price
sigma = c()
strike_K=c()
std_dev = c()
mins_s = c()
maxs_s = c()
payoffs_mean_s = c()
payoffs_min_s = c()
payoffs_max_s = c()


mean_put_price_sigma = c()
sd_put_price_sigma = c()
standard_error_put_prices_sigma = c()
max_put_price_sigma = c()
min_put_price_sigma = c()
sd_put_price = c()

discounted_factors_of_interest_rates
K_Strike_126_fixed

indicator_payoffs_mean_s = c()
indicator_payoffs_max_s = c()
indicator_payoffs_min_s = c()


system.time(for (index in 0:60){
  biomass_sigma = replicate(1000, euler_approx_sln(10,1/252,sigma_1=index/100,min_K=0.4,K=K1,r=r1,q=q1,effort=1,correlation=0, T=1), simplify = TRUE)[252,]
  sigma = append(sigma,index/100)
  strike_K= append(strike_K, K_Strike_126_fixed)
  std_dev= append(std_dev,sd(biomass_sigma))
  mins_s = append(mins_s, min(biomass_sigma))
  maxs_s = append(maxs_s, max(biomass_sigma))
  
  payoffs_sigma = pmax(rep(K_Strike_126_fixed,10000) - biomass_sigma,0)
  
  put_prices_sigma_sensitivity = discounted_factors_of_interest_rates_126 * payoffs_sigma
  
  indicator_payoffs_sigma = payoff_to_indicator(payoffs_sigma,100)[,2]
  
  payoffs_mean_s = append(payoffs_mean_s, mean(payoffs_sigma))
  payoffs_max_s = append(payoffs_max_s, max(payoffs_sigma))
  payoffs_min_s = append(payoffs_min_s, min(payoffs_sigma))
  
  indicator_payoffs_mean_s = append(indicator_payoffs_mean_s, mean(indicator_payoffs_sigma))
  indicator_payoffs_max_s = append(indicator_payoffs_max_s, max(indicator_payoffs_sigma))
  indicator_payoffs_min_s = append(indicator_payoffs_min_s, min(indicator_payoffs_sigma))
  
  indicator_put_prices_sigma_sensitivity = discounted_factors_of_interest_rates_126 * indicator_payoffs_sigma
  
  
  mean_put_price_sigma = append(mean_put_price_sigma, 100*mean(put_prices_sigma_sensitivity))
  sd_put_price = append(sd_put_price, sd(put_prices_sigma_sensitivity))
  standard_error_put_prices_sigma = append(standard_error_put_prices_sigma, sd(put_prices_sigma_sensitivity) / sqrt(10000-2))
  max_put_price_sigma = append(max_put_price_sigma, max(put_prices_sigma_sensitivity))
  min_put_price_sigma = append(min_put_price_sigma, min(put_prices_sigma_sensitivity))
  
}
)

#user  system elapsed 
#7.81    0.00    7.87 



put_prices_sigma_sensitivity_df = data.frame("sigma_sensitivity" = sigma, 
                                             "sd" = std_dev, 
                                             "min" = mins_s, 
                                             "max" = maxs_s,
                                             "mean_put_price" = mean_put_price_sigma,
                                             "sd_put_price" = standard_error_put_price_sigma,
                                             "max_put_price" = max_put_price_sigma,
                                             "min_put_price" = min_put_price_sigma)
remove(biomass_sigma, sigma, std_dev, mins_s, maxs_s, payoffs_sigma, put_prices_sigma_sensitivity, payoffs_mean_s, 
       payoffs_max_s,payoffs_min_s, mean_put_price_sigma, max_put_price_sigma, min_put_price_sigma, standard_error_put_prices_sigma)
head(put_prices_sigma_sensitivity_df)
plot(put_prices_sigma_sensitivity_df$sigma_sensitivity, put_prices_sigma_sensitivity_df$mean_put_price, type= "l", main = "calculated put price for varying sigma", xlab = "sigma (%)", ylab = "put price")

percentage_change_sigma_price = c()
for (i in 1:length(put_prices_sigma_sensitivity_df$sigma_sensitivity)) percentage_change_sigma_price=append(percentage_change_sigma_price,put_prices_sigma_sensitivity_df$mean_put_price[i]/put_prices_sigma_sensitivity_df$mean_put_price[31]-1)
put_prices_sigma_sensitivity_df$percentage_change_sigma_price = percentage_change_sigma_price

percentage_change_sigma = c()
for (i in 1:length(put_prices_sigma_sensitivity_df$sigma_sensitivity)) percentage_change_sigma=append(percentage_change_sigma,put_prices_sigma_sensitivity_df$sigma_sensitivity[i]/put_prices_sigma_sensitivity_df$sigma_sensitivity[31]-1)
put_prices_sigma_sensitivity_df$percentage_change_sigma_value = percentage_change_sigma

plot(put_prices_sigma_sensitivity_df$sigma_sensitivity,put_prices_sigma_sensitivity_df$mean_put_price, type = "l")
plot(put_prices_sigma_sensitivity_df$percentage_change_sigma_value,put_prices_sigma_sensitivity_df$percentage_change_sigma_price, type = "l")

put_prices_126_sigma_sensitivity_graph_data = data.frame("relative_change_in_sigma" = 100*put_prices_sigma_sensitivity_df$percentage_change_sigma_value,
                                                               "relative_change_in_price" = 100*put_prices_sigma_sensitivity_df$percentage_change_sigma_price)


ggplot(put_prices_126_sigma_sensitivity_graph_data) + 
  geom_line(aes(x=relative_change_in_sigma, y=relative_change_in_price)) +
  theme_bw() +
  labs(y = "Relative change (%) in the put price", 
       x = expression(atop("\n Relative change (%) in sigma", "Sigma " (sigma)))) +
  ggtitle(expression('Sensitivity analysis of the 6-momth European regular put price w.r.t. sigma '(sigma)*'; '*sigma[0]*'=30%')) +
  scale_x_continuous(breaks = seq(-100,100,50), labels = c("-100 \n 0.0", "-50 \n 0.15","0 \n 0.30","50 \n 0.45", "100 \n 0.60")) +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  theme(panel.background = element_blank(), axis.line=element_line(colour = "black")) +
  theme(axis.text.x = element_text(size=11), axis.text.y = element_text(size=11))




















##varying correlation

correlation = c()
std_dev_corr = c()
mins_corr = c()
maxs_corr = c()
payoffs_mean_corr = c()
payoffs_min_corr = c()
payoffs_max_corr = c()
std_dev = c()
strike_K = c()
mins = c()
maxs = c()

mean_put_price_corr = c()
sd_put_price_corr = c()
standard_error_put_price_corr = c()
max_put_price_corr = c()
min_put_price_corr = c()
sd_put_price_corr = c()

discounted_factors_of_interest_rates
K_Strike_126_fixed

indicator_payoffs_mean_corr = c()
indicator_payoffs_max_corr = c()
indicator_payoffs_min_corr = c()

interest_rates_126_rate_and_BM_correlation = vasicek(0.025,0.0463,0.1,0.05,0.5)

interest_rates_126_rate_and_BM_correlation_bms = data.frame(1:126)
interest_rates_126_rate_and_BM_correlation_rates = data.frame(1:126)

for (i in 1:10000) {
  interest_rates_126_rate_and_BM_correlation = vasicek(0.025,0.0463,0.1,0.05,0.5)
  interest_rates_126_rate_and_BM_correlation_rates = interest_rates_126_rate_and_BM_correlation_rates %>% add_column(interest_rates_126_rate_and_BM_correlation$r)
  interest_rates_126_rate_and_BM_correlation_bms = interest_rates_126_rate_and_BM_correlation_bms %>% add_column(interest_rates_126_rate_and_BM_correlation$dw)
}

interest_rates_126_rate_and_BM_correlation_rates = subset(interest_rates_126_rate_and_BM_correlation_rates, select  = -c(1))
interest_rates_126_rate_and_BM_correlation_rates[,1]

interest_rates_126_rate_and_BM_correlation_bms = subset(interest_rates_126_rate_and_BM_correlation_bms, select = -c(1))
interest_rates_126_rate_and_BM_correlation_bms[,1]


interest_rates_126_rate_and_BM_correlation_rates


simspon_factors_of_interest_rates_126_and_BM_correlation = c()
for (i in 1:10000) simspon_factors_of_interest_rates_126_and_BM_correlation = append(simspon_factors_of_interest_rates_126_and_BM_correlation, simpson_interest_rate(interest_rates_126_rate_and_BM_correlation_rates[,i],0.5), )

discounted_factors_of_interest_rates_126_and_BM_correlation = c()

discounted_factors_of_interest_rates_126_and_BM_correlation = discount_factors(simspon_factors_of_interest_rates_126_and_BM_correlation)

interest_rates_126_rate_and_BM_correlation_bms[,10000]
discounted_factors_of_interest_rates_126_and_BM_correlation


euler_approx_sln_correlation = function(x0,dt,sigma_1, min_K, K,r,q,effort,T, correlation, int_rate_BM_vector) {
  
  if   (T == 0.5)  t= 126
  if   (T == 1.0)  t= 252
  
  q = c(rep(q,t))
  
  if   (effort == 1)  E = rpois(t,20)
  if   (effort == 2)  E = c(rep(25,t))
  
  x_sol = c(x0)
  x_min = min_K*x_sol[1]
  
  dw_r = int_rate_BM_vector
  #int_rate = int_rate_vector_list$r
  
  if (correlation == 0) dw_1 = c(0, c(rnorm(t-1,mean = 0, sd = sqrt(1/t))))
  if (correlation != 0) {
    
    dw_3 = c(0, rnorm(t-1,mean = 0, sd = sqrt(1/t)))
    rho = correlation
    dw_1 = rho*dw_r + sqrt(1-rho**2)*dw_3    }
  
  for (i in 1:(t-1)) {
    if (x_sol[i] < x_min) {
      {for (index in i:i+20)
        q[i] = q[i]/2}}
    x_sol[i+1] = x_sol[i] + (r * (1-x_sol[i]/K) - q[i]*E[i]) * x_sol[i] * dt + sigma_1*x_sol[i]*dw_1[i]}
  return(x_sol)}



euler_approx_sln_correlation(10)


strike_K=c(rep(K_Strike_126_fixed,10000))

biomass_correlation_with_correlation = data.frame(1:126)


strike_K=c()

system.time(for (index in -100:100){
  
  biomass_corr = replicate(10000, euler_approx_sln(10,1/252,sigma_1=0.3,min_K=0.4,K=K1,r=r1,q=q1,effort=1,correlation=index/100, T=0.5), simplify = TRUE)[126,]
  
  correlation = append(correlation,index/100)
  strike_K= append(strike_K, K_Strike_126_fixed)
  #std_dev= append(std_dev,sd(biomass_corr))
  #mins = append(mins, min(biomass_corr))
  #maxs = append(maxs, max(biomass_corr))
  
  payoffs_corr = pmax(1*(strike_K - biomass_corr),0)
  
#  indicator_payoffs_corr = payoff_to_indicator(payoffs_corr,100)[,2]
  
  payoffs_mean_corr = append(payoffs_mean_corr, mean(payoffs_corr))
  payoffs_max_corr = append(payoffs_max_corr, max(payoffs_corr))
  payoffs_min_corr = append(payoffs_min_corr, min(payoffs_corr))
  
  put_prices_corr_sensitivity = discounted_factors_of_interest_rates_126_and_BM_correlation * payoffs_corr
  
 # indicator_payoffs_mean_corr = append(indicator_payoffs_mean_corr, mean(indicator_payoffs_corr))
  #indicator_payoffs_max_corr = append(indicator_payoffs_max_corr, max(indicator_payoffs_corr))
  #indicator_payoffs_min_corr = append(indicator_payoffs_min_corr, min(indicator_payoffs_corr))
  
  #indicator_put_prices_corr_sensitivity = discounted_factors_of_interest_rates_126_and_BM_correlation * indicator_payoffs_corr
  
  
  mean_put_price_corr = append(mean_put_price_corr, mean(put_prices_corr_sensitivity))
  sd_put_price_corr = append(sd_put_price_corr, sd(put_prices_corr_sensitivity))
  standard_error_put_price_corr = append(standard_error_put_price_corr, sd(put_prices_corr_sensitivity) / sqrt(10000-2))
  max_put_price_corr = append(max_put_price_corr, max(put_prices_corr_sensitivity))
  min_put_price_corr = append(min_put_price_corr, min(put_prices_corr_sensitivity))
  
})
#129.10    0.36  129.59 

put_prices_correlation_sensitivity_df = data.frame("correlation_sensitivity" = correlation, 
                                                   #"sd" = std_dev_corr, 
                                                   #"min" = mins_corr, 
                                                   #"max" = maxs,
                                                   "mean_put_price" = mean_put_price_corr,
                                                   "sd_put_price" = standard_error_put_price_corr,
                                                   "max_put_price" = max_put_price_corr,
                                                   "min_put_price" = min_put_price_corr)
remove(correlation, mean_put_price_corr, standard_error_put_price_corr, max_put_price_corr, min_put_price_corr)
head(put_prices_correlation_sensitivity_df)
plot(put_prices_correlation_sensitivity_df$correlation, put_prices_correlation_sensitivity_df$mean_put_price, type= "l", main = "calcuated put price for varying correlation", xlab = "correlaiton", ylab = "put price")



put_prices_correlation_sensitivity_df$correlation[101]

percentage_change_corr_price = c()
for (i in 1:length(put_prices_correlation_sensitivity_df$correlation_sensitivity)) percentage_change_corr_price=append(percentage_change_corr_price,put_prices_correlation_sensitivity_df$mean_put_price[i]/put_prices_correlation_sensitivity_df$mean_put_price[101]-1)
put_prices_correlation_sensitivity_df$percentage_change_corr_price = percentage_change_corr_price

plot(put_prices_correlation_sensitivity_df$correlation_sensitivity,put_prices_correlation_sensitivity_df$mean_put_price, type = "l")
plot(put_prices_correlation_sensitivity_df$correlation_sensitivity*100,put_prices_correlation_sensitivity_df$percentage_change_corr_price, type = "l")

put_prices_126_corr_sensitivity_graph_data = data.frame("relative_change_in_corr" = 100*put_prices_correlation_sensitivity_df$correlation_sensitivity,
                                                         "relative_change_in_price" = 100*put_prices_correlation_sensitivity_df$percentage_change_corr_price)

plot(put_prices_126_corr_sensitivity_graph_data$relative_change_in_corr, put_prices_126_corr_sensitivity_graph_data$relative_change_in_price, type = "l")

ggplot(put_prices_126_corr_sensitivity_graph_data) + 
  geom_line(aes(x=relative_change_in_corr, y=relative_change_in_price)) +
  theme_bw() +
  labs(y = "Relative change (%) in the put price", 
       x = expression(atop("\n Relative change (%) in correlation", "Correlation " (rho)))) +
  ggtitle(expression('Figure 5: Sensitivity analysis of European put price w.r.t. correlation '(rho)*'; '*rho[0]*'=0%')) +
  scale_x_continuous(breaks = seq(-100,100,50), labels = c("-100 \n -1.00", "-50 \n -0.50","0 \n 0.00","50 \n 0.50", "100 \n 1.00")) +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  theme(panel.background = element_blank(), axis.line=element_line(colour = "black")) +
  theme(axis.text.x = element_text(size=11), axis.text.y = element_text(size=11))








#plot(correlation, mean_put_price_corr, type = "l", main = )
percentage_change = c()
for (i in 1:length(correlation)) {
  percentage_change=append(percentage_change,mean_put_price_corr[i]/mean_put_price_corr[101]-1)}

plot(correlation, percentage_change, type = "l", main = "Relative Change in the European Calculated Put Price (%) w.r.t. Correlation, 0%=No change ", ylab = "Percentage Change of Put Price", xlab = )

put_prices_correlation_sensitivity_df$percentage_change = c(NA, percentage_change)
plot(put_prices_correlation_sensitivity_df$correlation_sensitivity,put_prices_correlation_sensitivity_df$percentage_change, type = "l", main = "Relative Change in the Calculated European Put Price (%) w.r.t. Correlation, 0%=No change", xlab = expression("Correlation " (rho)), ylab = "Relative change of Put Price ")

plot(put_prices_correlation_sensitivity_df$correlation_sensitivity,put_prices_correlation_sensitivity_df$mean_put_price, type = "l", main = "calculated put price w.r.t. correlation", ylab = "Relative Change of Put Price", xlab = expression("Correlation " (rho)))














indicator_put_prices_corr_sensitivity_df = data.frame("ind. payoff mean"= indicator_payoffs_mean_corr,"ind. payoff max" = indicator_payoffs_max_corr, "ind/ payoff min" = indicator_payoffs_min_corr)
remove(indicator_payoffs_corr,indicator_payoffs_max_corr,indicator_payoffs_min_corr,indicator_payoffs_mean_corr)

#y-values should be in percentage level 

put_prices_correlation_sensitivity_df$correlation_sensitivity[101]

#percentage_change = c()
#for (i in 2:length(put_prices_correlation_sensitivity_df$correlation_sensitivity))
#percentage_change=append(percentage_change,put_prices_correlation_sensitivity_df$mean_put_price[i]/put_prices_correlation_sensitivity_df$mean_put_price[101]-1)
#put_prices_correlation_sensitivity_df$percentage_change = c(NA, percentage_change)

#plot(put_prices_correlation_sensitivity_df$correlation_sensitivity,put_prices_correlation_sensitivity_df$percentage_change, type = "l", main = "% change of put price w.r.t. correlation")



percentage_change = c()
for (i in 2:length(put_prices_correlation_sensitivity_df$correlation_sensitivity)) {
  percentage_change=append(percentage_change,put_prices_correlation_sensitivity_df$mean_put_price[i]/put_prices_correlation_sensitivity_df$mean_put_price[101]-1)}

put_prices_correlation_sensitivity_df$percentage_change = c(NA, percentage_change)
plot(put_prices_correlation_sensitivity_df$correlation_sensitivity,put_prices_correlation_sensitivity_df$percentage_change, type = "l", main = "% change of put price w.r.t. correlation with base 0", xlab = "correlation", ylab = "Relative change in the put price (%) ")
plot(put_prices_correlation_sensitivity_df$correlation_sensitivity,put_prices_correlation_sensitivity_df$mean_put_price, type = "l", main = "calculated put price w.r.t. correlation", xlab = "CORRELATION", ylab = "calculated put price ")





















##varying growth rate

##r = 0.71  #intrinsic growth rate (1/year)

growth_rate = c()
std_dev_gr = c()
mins_gr = c()
maxs_gr = c()
strike_K = c()
payoffs_mean_gr = c()
payoffs_min_gr = c()
payoffs_max_gr = c()


mean_put_price_gr = c()
sd_put_price_gr = c()
standard_error_put_price_gr = c()
max_put_price_gr = c()
min_put_price_gr = c()
sd_put_price_gr = c()

discounted_factors_of_interest_rates
K_Strike_126_fixed

indicator_payoffs_mean_gr = c()
indicator_payoffs_max_gr = c()
indicator_payoffs_min_gr = c()


system.time(for (index in 0:140){
  biomass_gr = replicate(100, euler_approx_sln(10,1/252,sigma_1=0.30,min_K=0.4,K=K1,r=index/100,q=q1,effort=1,correlation=0, T=0.5), simplify = TRUE)[126,]
  growth_rate = append(growth_rate,index/100)
  strike_K= append(strike_K, K_Strike_126_fixed)
  std_dev_gr= append(std_dev_gr,sd(biomass_gr))
  mins_gr = append(mins_gr, min(biomass_gr))
  maxs_gr = append(maxs_gr, max(biomass_gr))
  
  payoffs_gr = pmax(K_Strike_126_fixed - biomass_gr,0)
  
  indicator_payoffs_gr = payoff_to_indicator(payoffs_gr,100)[,2]
  
  payoffs_mean_gr = append(payoffs_mean_gr, mean(payoffs_gr))
  payoffs_max_gr = append(payoffs_max_gr, max(payoffs_gr))
  payoffs_min_gr = append(payoffs_min_gr, min(payoffs_gr))
  
  put_prices_gr_sensitivity = discounted_factors_of_interest_rates_126 * payoffs_gr
  
  indicator_payoffs_mean_gr = append(indicator_payoffs_mean_gr, mean(indicator_payoffs_gr))
  indicator_payoffs_max_gr = append(indicator_payoffs_max_gr, max(indicator_payoffs_gr))
  indicator_payoffs_min_gr = append(indicator_payoffs_min_gr, min(indicator_payoffs_gr))
  
  indicator_put_prices_growthrate_sensitivity = discounted_factors_of_interest_rates_126 * indicator_payoffs_gr
  
  
  mean_put_price_gr = append(mean_put_price_gr, mean(put_prices_gr_sensitivity))
  sd_put_price_gr = append(sd_put_price_gr, sd(put_prices_gr_sensitivity))
  standard_error_put_price_gr = append(standard_error_put_price_gr, sd(put_prices_gr_sensitivity) / sqrt(10000-2))
  max_put_price_gr = append(max_put_price_gr, max(put_prices_gr_sensitivity))
  min_put_price_gr = append(min_put_price_gr, min(put_prices_gr_sensitivity))
  
}
)

#user  system elapsed 
#129.10    0.36  129.59     2.75  0.00  2.75

put_prices_growthrate_sensitivity_df2 = data.frame("growth_rate_sensitivity" = growth_rate, 
                                                  "std_dev_gr" = std_dev_gr, 
                                                  #"min_gr" = mins_gr, 
                                                  #"max_gr_biomaass" = max_gr,
                                                  "mean_put_price_gr" = mean_put_price_gr,
                                                  "sd_put_price_gr" = standard_error_put_price_gr,
                                                  "max_put_price" = max_put_price_gr,
                                                  "min_put_price" = min_put_price_gr)


#put_prices_growthrate_sensitivity_df = data.frame("growth_rate_sensitivity" = growth_rate, 
                                                  # "std_dev_gr" = std_dev_gr, 
                                                   #"min_gr" = mins_gr, 
                                                   #"max_gr_biomaass" = max_gr,
                                                   #"mean_put_price_gr" = mean_put_price_gr,
                                                   #"sd_put_price_gr" = standard_error_put_price_gr,
                                                   #"max_put_price" = max_put_price_gr,
                                                   #"min_put_price" = min_put_price_gr)
remove(growth_rate, mean_put_price_gr, standard_error_put_price_gr, max_put_price_gr, min_put_price_gr)
head(put_prices_growthrate_sensitivity_df)
plot(put_prices_growthrate_sensitivity_df$growth_rate_sensitivity,100*put_prices_growthrate_sensitivity_df$mean_put_price_gr, type = "l", main = "Calculated Put Price w.r.t. Growthrate", xlab = "Growth Rate (g)", ylab = "Calculated Put Price ($)")

percentage_change_gr = c()
for (i in 1:length(put_prices_growthrate_sensitivity_df$growth_rate_sensitivity)) percentage_change_gr=append(percentage_change_gr,put_prices_growthrate_sensitivity_df$mean_put_price[i]/put_prices_growthrate_sensitivity_df$mean_put_price[171]-1)
put_prices_growthrate_sensitivity_df$percentage_change = percentage_change_gr




plot(put_prices_growthrate_sensitivity_df2$growth_rate_sensitivity,100*put_prices_growthrate_sensitivity_df2$mean_put_price_gr, type = "l", main = "Calculated Put Price w.r.t. Growthrate", xlab = "Growth Rate (g)", ylab = "Calculated Put Price ($)")

percentage_change_gr2 = c()
for (i in 1:length(put_prices_growthrate_sensitivity_df2$growth_rate_sensitivity)) percentage_change_gr2=append(percentage_change_gr2,put_prices_growthrate_sensitivity_df2$mean_put_price[i]/put_prices_growthrate_sensitivity_df2$mean_put_price[71]-1)
put_prices_growthrate_sensitivity_df2$percentage_change = percentage_change_gr2

percentage_change_x = c()
for (i in 1:length(put_prices_growthrate_sensitivity_df2$growth_rate_sensitivity)) percentage_change_x=append(percentage_change_x, put_prices_growthrate_sensitivity_df2$growth_rate_sensitivity[i]/put_prices_growthrate_sensitivity_df2$growth_rate_sensitivity[71]-1)
put_prices_growthrate_sensitivity_df2$percentage_change_x = percentage_change_x


#plot(put_prices_growthrate_sensitivity_df2$growth_rate_sensitivity,put_prices_growthrate_sensitivity_df2$mean_put_price_gr, type = "l", main = "calculated put price w.r.t. change in growthrate")

#the trend is not smooth. THe smoothness will be obtained as we increase number of simulations

##put the g of title as g_0 for growth initial 

plot(1:10, xlab=expression('hi'[5]*'there'[6]^8*'you'[2]))


put_prices_126_growthrate_sensitivity_graph_data = data.frame("relative_change_in_growth_rate" = 100*put_prices_growthrate_sensitivity_df$percentage_change_x,
                                                              "relative_change_in_price" = 100*put_prices_growthrate_sensitivity_df$percentage_change)
plot(put_prices_growthrate_sensitivity_df2$growth_rate_sensitivity,100*put_prices_growthrate_sensitivity_df2$mean_put_price_gr, type = "l", main = "Calculated Put Price w.r.t. Growthrate", xlab = "Growth Rate (g)", ylab = "Calculated Put Price ($)")

put_prices_126_growthrate_sensitivity_graph_data2 = data.frame("relative_change_in_growth_rate" = 100*put_prices_growthrate_sensitivity_df2$percentage_change_x,
                                                              "relative_change_in_price" = 100*put_prices_growthrate_sensitivity_df2$percentage_change)

ggplot(put_prices_126_growthrate_sensitivity_graph_data2) + 
  geom_line(aes(x=relative_change_in_growth_rate, y=relative_change_in_price)) +
  labs(y = "Relative change (%) in the put price", 
       x = expression(atop("\n Relative change (%) in the growth rate", "Growth rate (g)"))) +
  ggtitle(expression("Senstivity analysis of the 6-month European regular put price w.r.t. growth rate (g); g" [0]*"=70%")) +
  scale_x_continuous(breaks = seq(-100,100,50), labels = c("-100 \n 0.0", "-50 \n 0.35","0 \n 0.70","50 \n 1.05", "100 \n 1.40")) +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  theme(panel.background = element_blank(), axis.line=element_line(colour = "black")) +
  theme(axis.text.x = element_text(size=11), axis.text.y = element_text(size=11))






##varying Strike Price to look at the moneyness of the option

strike = c()
payoffs_mean_strike = c()
payoffs_min_strike = c()
payoffs_max_strike = c()


mean_put_price_strike = c()
sd_put_price_strike = c()
standard_error_put_price_strike = c()
max_put_price_strike = c()
min_put_price_strike = c()
sd_put_price_strike = c()

discounted_factors_of_interest_rates_126
K_Strike_126_fixed

moneyness = c()

#2-30 by 0.25 = 28*4 = 112

system.time(for (index in 0:80){
  #biomass_for_options
  strike = append(strike,0.25*index)
  payoffs_strike = pmax(100*(0.25*index - biomass_for_options[126,]),0)
  
  payoffs_mean_strike = append(payoffs_mean_strike, mean(payoffs_strike))
  payoffs_max_strike  = append(payoffs_max_strike, max(payoffs_strike))
  payoffs_min_strike  = append(payoffs_min_strike, min(payoffs_strike))
  
  put_prices_strike_sensitivity = discounted_factors_of_interest_rates_126 * payoffs_strike
  
  #moneyness = append(moneyness, strike[index]/10)
  
  mean_put_price_strike = append(mean_put_price_strike, mean(put_prices_strike_sensitivity))
  sd_put_price_strike = append(sd_put_price_strike, sd(put_prices_strike_sensitivity))
  standard_error_put_price_strike = append(standard_error_put_price_strike, sd(put_prices_strike_sensitivity) / sqrt(10000-2))
  max_put_price_strike = append(max_put_price_strike, max(put_prices_strike_sensitivity))
  min_put_price_strike = append(min_put_price_strike, min(put_prices_strike_sensitivity))
  
}
)

#user  system elapsed 
#0.03    0.00  0.03 



put_prices_strike_sensitivity_df2 = data.frame("strike" = strike,
                                              #"moneyness ratio" = moneyness,
                                                  "calculated put price" = mean_put_price_strike, 
                                                  "max put price" = max_put_price_strike, 
                                                  "min put price" = min_put_price_strike,
                                                  "std dev put_price" = sd_put_price_strike,
                                                  "max_put_price" = max_put_price_strike,
                                                  "min_put_price" = min_put_price_strike)

put_prices_strike_sensitivity_df2$moneyness_ratio = put_prices_strike_sensitivity_df2$strike/10


plot(put_prices_strike_sensitivity_df2$moneyness_ratio, put_prices_strike_sensitivity_df2$calculated.put.price, type = "l")

remove(strike, mean_put_price_strike,sd_put_price_strike,standard_error_put_price_strike,max_put_price_strike,min_put_price_strike)
head(put_prices_strike_sensitivity_df)

put_prices_strike_sensitivity_df2$moneyness_ratio[41]
plot(put_prices_strike_sensitivity_df2$moneyness_ratio, put_prices_strike_sensitivity_df2$calculated.put.price, type = "l")

percentage_change = c()
for (i in 1:length(put_prices_strike_sensitivity_df2$moneyness_ratio)) percentage_change=append(percentage_change,put_prices_strike_sensitivity_df2$calculated.put.price[i]/put_prices_strike_sensitivity_df2$calculated.put.price[41])
                                                                                                 
                                                                                                 
                                                                                                 put_prices_growthrate_sensitivity_df$mean_put_price[i]/put_prices_growthrate_sensitivity_df$mean_put_price[171]-1)
put_prices_strike_sensitivity_df$percentage_change = percentage_change

put_prices_strike_sensitivity_df2$percentage_change = percentage_change

plot(put_prices_strike_sensitivity_df$strike,put_prices_strike_sensitivity_df$calculated.put.price, main = "Calculated put price w.r.t. moneyness ratio", xlab = "Strike (K)", ylab = "Calculated Put Price ($)", type = "l")
#plot(put_prices_strike_sensitivity_df$moneyness_ratio, put_prices_strike_sensitivity_df$)

plot(put_prices_strike_sensitivity_df$moneyness_ratio,put_prices_strike_sensitivity_df$calculated.put.price, xlab = "Moneyness Ratio", ylab = "Calculated Put Price", main= "Calculated European Put Price w.r.t. Moneyness Ratio", type = "l")

put_prices_strike_sensitivity_df$moneyness_ratio[33]
put_prices_strike_sensitivity_df$calculated.put.price[33]

percentage_change_126_moneyness_ratio= c()
for (i in 1:length(put_prices_strike_sensitivity_df$calculated.put.price)) percentage_change_126_moneyness_ratio =append (percentage_change_126_moneyness_ratio, put_prices_strike_sensitivity_df$calculated.put.price[i] / put_prices_strike_sensitivity_df$calculated.put.price[33] -1 )

plot(put_prices_strike_sensitivity_df$moneyness_ratio, 100 *percentage_change_126_moneyness_ratio, type = "l")




plot(put_prices_strike_sensitivity_df2$moneyness_ratio, 100*put_prices_strike_sensitivity_df2$percentage_change, type = "l")


K_Strike_126_fixed
put_prices_strike_sensitivity_df[49,]
#change x axis to moneyness ratio
#superimpose it. 1.0 on the money, greater than 1 is out of the money


put_prices_126_strike_sensitivity_df = data.frame("Moneyness_ratio" = put_prices_strike_sensitivity_df2$moneyness_ratio,
                                                  "Relative_change_in_put_price" = 100*put_prices_strike_sensitivity_df2$percentage_change)



head(put_prices_126_strike_sensitivity_df)

ggplot(put_prices_126_strike_sensitivity_df) + aes (x=Moneyness_ratio, y=Relative_change_in_put_price)

ggplot(put_prices_126_strike_sensitivity_df) + aes (x=Moneyness_ratio, y="Relative_change_in_put price")


ggplot(put_prices_126_strike_sensitivity_df) +  
  geom_line(aes(x=Moneyness_ratio, y=Relative_change_in_put_price)) +
  labs(y = "Relative change (%) in the put price", 
       x = "Moneyness Ratio") +
  ggtitle(expression("Senstivity analysis of the 6-month European regular put price w.r.t. moneyness ratio")) +
  theme_bw() +
  theme(plot.title = element_text(hjust=0.5)) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  theme(panel.background = element_blank(), axis.line=element_line(colour = "black"))# +
  #theme(axis.text.x = element_text(size=11), axis.text.y = element_text(size=11))




























##varying effort

effort = c()
std_dev_e = c()
mins_e = c()
maxs_e = c()
payoffs_mean_e = c()
payoffs_min_e = c()
payoffs_max_e = c()


mean_put_price_e = c()
sd_put_price_e = c()
standard_error_put_price_e = c()
max_put_price_e = c()
min_put_price_e = c()
sd_put_price_e = c()

discounted_factors_of_interest_rates
K_Strike_126_fixed

indicator_payoffs_mean_e = c()
indicator_payoffs_max_e = c()
indicator_payoffs_min_e = c()


system.time(for (index in 0:100){
  biomass_gr = replicate(100, euler_approx_sln(10,1/252,sigma_1=0.25,min_K=0.4,K=K1,r=index/100,q=q1,effort=2,correlation=0, T=0.5), simplify = TRUE)[126,]
  growth_rate = append(growth_rate,index/100)
  strike_K= append(strike_K, K_Strike_126_fixed)
  std_dev_gr= append(std_dev_gr,sd(biomass_gr))
  mins_gr = append(mins_gr, min(biomass_gr))
  maxs_gr = append(maxs_gr, max(biomass_gr))
  
  payoffs_gr = pmax(strike_K - biomass_gr,0)
  
  indicator_payoffs_gr = payoff_to_indicator(payoffs_gr,100)[,2]
  
  payoffs_mean_gr = append(payoffs_mean_gr, mean(payoffs_gr))
  payoffs_max_gr = append(payoffs_max_gr, max(payoffs_gr))
  payoffs_min_gr = append(payoffs_min_gr, min(payoffs_gr))
  
  put_prices_gr_sensitivity = discounted_factors_of_interest_rates * payoffs_gr
  
  indicator_payoffs_mean_gr = append(indicator_payoffs_mean_gr, mean(indicator_payoffs_gr))
  indicator_payoffs_max_gr = append(indicator_payoffs_max_gr, max(indicator_payoffs_gr))
  indicator_payoffs_min_gr = append(indicator_payoffs_min_gr, min(indicator_payoffs_gr))
  
  indicator_put_prices_growthrate_sensitivity = discounted_factors_of_interest_rates * indicator_payoffs_gr
  
  
  mean_put_price_gr = append(mean_put_price_gr, mean(put_prices_gr_sensitivity))
  sd_put_price_gr = append(sd_put_price_gr, sd(put_prices_gr_sensitivity))
  standard_error_put_price_gr = append(standard_error_put_price_gr, sd(put_prices_gr_sensitivity) / sqrt(10000-2))
  max_put_price_gr = append(max_put_price_gr, max(put_prices_gr_sensitivity))
  min_put_price_gr = append(min_put_price_gr, min(put_prices_gr_sensitivity))
  
}
)

#user  system elapsed 
#129.10    0.36  129.59 



put_prices_growthrate_sensitivity_df = data.frame("growth_rate_sensitivity" = growth_rate, 
                                                  "std_dev_gr" = std_dev_gr, 
                                                  #"min_gr" = mins_gr, 
                                                  #"max_gr_biomaass" = max_gr,
                                                  "mean_put_price_gr" = mean_put_price_gr,
                                                  "sd_put_price_gr" = standard_error_put_price_gr,
                                                  "max_put_price" = max_put_price_gr,
                                                  "min_put_price" = min_put_price_gr)
remove(growth_rate, mean_put_price_gr, standard_error_put_price_gr, max_put_price_gr, min_put_price_gr)
head(put_prices_growthrate_sensitivity_df)
plot(put_prices_growthrate_sensitivity_df$growth_rate_sensitivity, 100*put_prices_growthrate_sensitivity_df$mean_put_price_gr, type= "l", main = "calculated put price for varying growth_rate", xlab = "growth rate g", ylab = "calculated put price")

percentage_change = c()
for (i in 2:length(put_prices_growthrate_sensitivity_df$growth_rate_sensitivity)) percentage_change=append(percentage_change,put_prices_growthrate_sensitivity_df$mean_put_price[i]/put_prices_growthrate_sensitivity_df$mean_put_price[72]-1)
put_prices_growthrate_sensitivity_df$percentage_change = c(NA, percentage_change)


plot(put_prices_growthrate_sensitivity_df$growth_rate_sensitivity,put_prices_growthrate_sensitivity_df$mean_put_price_gr, type = "l", main = "calculated put price w.r.t. change in growthrate")
plot(put_prices_growthrate_sensitivity_df$growth_rate_sensitivity,put_prices_growthrate_sensitivity_df$percentage_change, type = "l", main = "% change of put price w.r.t. growthrate")



#the trend is not smooth. THe smoothness will be obtained as we increase number of simulations


















##varying minimum carrying capacity
min_kappa = c()

mean_put_price_min_kappa = c()
sd_put_price_min_kappa = c()
standard_error_put_prices_min_kappa = c()
max_put_price_min_kappa = c()
min_put_price_min_kappa = c()
sd_put_price_min_kappa = c()

discounted_factors_of_interest_rates_126
K_Strike_126_fixed

indicator_payoffs_mean_kappa = c()
indicator_payoffs_max_kappa = c()
indicator_payoffs_min_kappa = c()

payoffs_mean_kappa = c()
payoffs_min_kappa = c()
payoffs_max_kappa = c()




system.time(for (index in 10:70){
  biomass_kappa = replicate(1000, euler_approx_sln(10,1/252,sigma_1=0.30,min_K=index/100,K=K1,r=r1,q=q1,effort=1,correlation=0, T=1), simplify = TRUE)[252,]
  min_kappa = append(min_kappa,index/100)
  #strike_K= append(strike_K, K_Strike_126_fixed)
  #std_dev= append(std_dev,sd(biomass_sigma))
  #mins_s = append(mins_s, min(biomass_sigma))
  #maxs_s = append(maxs_s, max(biomass_sigma))
  
  payoffs_kappa = pmax(rep(K_Strike_126_fixed,10000) - biomass_kappa,0)
  
  put_prices_kappa_sensitivity = discounted_factors_of_interest_rates_126 * payoffs_kappa
  
  indicator_payoffs_kappa = payoff_to_indicator(payoffs_kappa,100)[,2]
  
  payoffs_mean_kappa = append(payoffs_mean_kappa, mean(payoffs_kappa))
  payoffs_max_kappa = append(payoffs_max_kappa, max(payoffs_kappa))
  payoffs_min_kappa = append(payoffs_min_kappa, min(payoffs_kappa))
  
  indicator_payoffs_mean_kappa = append(indicator_payoffs_mean_kappa, mean(indicator_payoffs_kappa))
  indicator_payoffs_max_kappa = append(indicator_payoffs_max_kappa, max(indicator_payoffs_kappa))
  indicator_payoffs_min_kappa = append(indicator_payoffs_min_kappa, min(indicator_payoffs_kappa))
  
  indicator_put_prices_kappa_sensitivity = discounted_factors_of_interest_rates_126 * indicator_payoffs_kappa
  
  
  mean_put_price_min_kappa = append(mean_put_price_min_kappa, 100*mean(put_prices_kappa_sensitivity))
  sd_put_price_min_kappa = append(sd_put_price_min_kappa, sd(put_prices_kappa_sensitivity))
  standard_error_put_prices_min_kappa = append(standard_error_put_prices_min_kappa, sd(put_prices_kappa_sensitivity) / sqrt(10000-2))
  max_put_price_min_kappa = append(max_put_price_min_kappa, max(put_prices_kappa_sensitivity))
  min_put_price_min_kappa = append(min_put_price_min_kappa, min(put_prices_kappa_sensitivity))
  
}
)

#user  system elapsed 
#18.19    0.06    18.25 



put_prices_min_kappa_sensitivity_df = data.frame("min_kappa" = min_kappa, 
                                             "sd" = sd_put_price_min_kappa, 
                                             #"min" = min_put_price_min_kappa, 
                                             #"max" = max_put_price_min_kappa,
                                             "mean_put_price" = mean_put_price_min_kappa,
                                             "sd_put_price" = standard_error_put_prices_min_kappa,
                                             "max_put_price" = max_put_price_min_kappa,
                                             "min_put_price" = min_put_price_min_kappa)

remove(min_kappa,sd_put_price_min_kappa,min_put_price_min_kappa, max_put_price_min_kappa, mean_put_price_min_kappa, standard_error_put_prices_min_kappa)
head(put_prices_min_kappa_sensitivity_df)


put_prices_min_kappa_sensitivity_df$min_kappa[31]

plot(put_prices_min_kappa_sensitivity_df$min_kappa, put_prices_min_kappa_sensitivity_df$mean_put_price, type = "l")


percentage_change_kappa_price = c()
for (i in 1:length(put_prices_kappa_sensitivity_df$min_kappa)) percentage_change_kappa_price=append(percentage_change_kappa_price,put_prices_kappa_sensitivity_df$mean_put_price[i]/put_prices_kappa_sensitivity_df$mean_put_price[31]-1)
put_prices_min_kappa_sensitivity_df$percentage_change_sigma_price = percentage_change_sigma_price

percentage_change_kappa = c()
for (i in 1:length(put_prices_kappa_sensitivity_df$min_kappa)) percentage_change_sigma=append(percentage_change_sigma,put_prices_sigma_sensitivity_df$sigma_sensitivity[i]/put_prices_sigma_sensitivity_df$sigma_sensitivity[31]-1)
put_prices_sigma_sensitivity_df$percentage_change_sigma_value = percentage_change_sigma



















K1 #1,000,000
##varying max Carrying Capacity
max_KK = c()

mean_put_price_max_KK = c()
sd_put_price_max_KK = c()
standard_error_put_prices_max_KK = c()
max_put_price_max_KK = c()
min_put_price_max_KK = c()
sd_put_price_max_KK = c()

discounted_factors_of_interest_rates_126
K_Strike_126_fixed

indicator_payoffs_mean_max_KK = c()
indicator_payoffs_max_max_KK = c()
indicator_payoffs_min_max_KK = c()

payoffs_mean_max_KK = c()
payoffs_min_max_KK = c()
payoffs_max_max_KK = c()

1,000,000 by 50,000 from 0 to 2,000,000




system.time(for (index in 0:40){
  biomass_max_KK = replicate(1000, euler_approx_sln(10,1/252,sigma_1=0.30,min_K=0.40,K=index*50000,r=r1,q=q1,effort=1,correlation=0, T=1), simplify = TRUE)[252,]
  max_KK = append(max_KK,index*50000)
  #strike_K= append(strike_K, K_Strike_126_fixed)
  #std_dev= append(std_dev,sd(biomass_sigma))
  #mins_s = append(mins_s, min(biomass_sigma))
  #maxs_s = append(maxs_s, max(biomass_sigma))
  
  payoffs_max_KK = pmax(rep(K_Strike_126_fixed,10000) - biomass_max_KK,0)
  
  put_prices_max_KK_sensitivity = discounted_factors_of_interest_rates_126 * payoffs_max_KK
  
  indicator_payoffs_max_KK = payoff_to_indicator(payoffs_max_KK,100)[,2]
  
  payoffs_mean_max_KK = append(payoffs_mean_max_KK, mean(payoffs_max_KK))
  payoffs_max_max_KK = append(payoffs_max_max_KK, max(payoffs_max_KK))
  payoffs_min_max_KK = append(payoffs_min_max_KK, min(payoffs_max_KK))
  
  indicator_payoffs_mean_max_KK = append(indicator_payoffs_mean_max_KK, mean(indicator_payoffs_max_KK))
  indicator_payoffs_max_max_KK = append(indicator_payoffs_max_max_KK, max(indicator_payoffs_max_KK))
  indicator_payoffs_min_max_KK = append(indicator_payoffs_min_max_KK, min(indicator_payoffs_max_KK))
  
  indicator_put_prices_max_KK_sensitivity = discounted_factors_of_interest_rates_126 * indicator_payoffs_max_KK
  
  
  mean_put_price_min_max_KK = append(mean_put_price_min_max_KK, 100*mean(put_prices_max_KK_sensitivity))
  sd_put_price_min_max_KK = append(sd_put_price_min_max_KK, sd(put_prices_max_KK_sensitivity))
  standard_error_put_prices_min_max_KK = append(standard_error_put_prices_min_max_KK, sd(put_prices_max_KK_sensitivity) / sqrt(10000-2))
  max_put_price_min_max_KK = append(max_put_price_min_max_KK, max(put_prices_max_KK_sensitivity))
  min_put_price_min_max_KK = append(min_put_price_min_max_KK, min(put_prices_max_KK_sensitivity))
  
}
)

#user  system elapsed 
#18.19    0.06    18.25 



put_prices_min_max_KK_sensitivity_df = data.frame("min_max_KK" = min_max_KK, 
                                                 "sd" = sd_put_price_min_max_KK, 
                                                 #"min" = min_put_price_min_max_KK, 
                                                 #"max" = max_put_price_min_max_KK,
                                                 "mean_put_price" = mean_put_price_min_max_KK,
                                                 "sd_put_price" = standard_error_put_prices_min_max_KK,
                                                 "max_put_price" = max_put_price_min_max_KK,
                                                 "min_put_price" = min_put_price_min_max_KK)

remove(min_max_KK,sd_put_price_min_max_KK,min_put_price_min_max_KK, max_put_price_min_max_KK, mean_put_price_min_max_KK, standard_error_put_prices_min_max_KK)
head(put_prices_min_max_KK_sensitivity_df)


put_prices_min_max_KK_sensitivity_df$min_max_KK[31]

plot(put_prices_min_max_KK_sensitivity_df$min_max_KK, put_prices_min_max_KK_sensitivity_df$mean_put_price, type = "l")


percentage_change_kappa_price = c()
for (i in 1:length(put_prices_kappa_sensitivity_df$min_kappa)) percentage_change_kappa_price=append(percentage_change_kappa_price,put_prices_kappa_sensitivity_df$mean_put_price[i]/put_prices_kappa_sensitivity_df$mean_put_price[31]-1)
put_prices_min_kappa_sensitivity_df$percentage_change_sigma_price = percentage_change_sigma_price

percentage_change_kappa = c()
for (i in 1:length(put_prices_kappa_sensitivity_df$min_kappa)) percentage_change_sigma=append(percentage_change_sigma,put_prices_sigma_sensitivity_df$sigma_sensitivity[i]/put_prices_sigma_sensitivity_df$sigma_sensitivity[31]-1)
put_prices_sigma_sensitivity_df$percentage_change_sigma_value = percentage_change_sigma












## VaR ----- 

#put_payoffs = pmax(100*(K_Strike_126_fixed - S_T),0)
#mean(put_payoffs)

mean(terminal_value_S_T_126)

put_payoffs_126_all = 100*(K_Strike_126_fixed - terminal_value_S_T_126) 


put_payoffs_126_all_positive_count = 0
put_payoffs_126_all_negative_sum = 0

for (i in 1:length(put_payoffs_126_all)) {
  if(put_payoffs_126_all[i]>=0) put_payoffs_126_all_positive_count = put_payoffs_126_all_positive_count + 1
  if(put_payoffs_126_all[i]<0) put_payoffs_126_all_negative_sum = put_payoffs_126_all_negative_sum + put_payoffs_126_all[i]
  
}

mean_profit_put_prices_126_all = (put_payoffs_126_all_positive_count * mean(put_prices_126) + put_payoffs_126_all_negative_sum ) / 10000
mean_profit_put_prices_126_all


put_payoffs_126_all_final




















put_payoffs_252_all = 100*(K_Strike_252_fixed - terminal_value_S_T_252)

mean(put_payoffs_126_all)
max(put_payoffs_126_all)
min(put_payoffs_126_all)

hist(put_payoffs_126_all, main = "6-month Payoff Distribution Histogram", 
     col = 8, border = "black", xlab = "Issuer Payoff ($)")

ggplot(data.frame("Payoff" = put_payoffs_126_all), aes(x=Payoff)) + geom_histogram()


3000


summary(put_payoffs_126_all)

mean(put_payoffs_252_all)
max(put_payoffs_252_all)
min(put_payoffs_252_all)


hist(put_payoffs_126_all, binwidth = 100)

hist(put_payoffs_252_all)


put_payoffs_126_all_ordered = sort(put_payoffs_126_all)
put_payoffs_252_all_ordered = sort(put_payoffs_252_all)

quantile(put_payoffs_126_all_ordered, c(0.01,0.05,0.10))
quantile(put_payoffs_252_all_ordered, c(0.01,0.05,0.10))


#hist(true_payoffs_ordered, main = "profit in terms of buyer")

#payoff_interest_rates = replicate(10000, simpson_interest_rate(vasicek(0.025,0.0463,0.3,0.05,0.5)$r, 0.5))
#discount_factors = exp(-payoff_interest_rates*0.5)

put_payoffs_126_neg_only = subset(put_payoffs_126_all_ordered,put_payoffs_126_all_ordered<0) 
put_payoffs_252_neg_only = subset(put_payoffs_252_all_ordered,put_payoffs_252_all_ordered<0)

max(put_payoffs_126_neg_only);min(put_payoffs_126_neg_only);hist(put_payoffs_126_neg_only)
max(put_payoffs_252_neg_only);min(put_payoffs_252_neg_only);hist(put_payoffs_252_neg_only)

quantile(put_payoffs_126_neg_only, c(0.01,0.05,0.10))
quantile(put_payoffs_252_neg_only, c(0.01,0.05,0.10))

put_payoffs_126_atm = pmax(10 - terminal_value_S_T_126,0)
put_payoffs_252_atm = pmax(10 - terminal_value_S_T_252,0)

hist(put_payoffs_126_atm)
hist(put_payoffs_252_atm)



hist(put_payoffs_126_neg_only)




#mean(terminal_value_S_T)
#K_Strike_126_fixed
#payoffs_VaR = 20.14677 - terminal_value_S_T  ##THIS IS IN THE MONEY OPTION
#hist(payoffs_VaR, xlim = c(-25,20)) #not symmetric as it is simulated. More symmetric if more than 10,000 simulations.
#MORE LOSSES THAN GAINS AS THE EXTREME TO THE RIGHT IS BIGGER THAN TO THE LEFT
#
##at the money 
#at the money
#payoffs_atm_VaR = (10 - terminal_value_S_T)  ##THIS IS at THE MONEY OPTION
#hist(payoffs_atm_VaR, xlim = c(-40,20)) #more symmetric, more losses
#moneyness_ratio_atm = 10/10
#moneyness_ratio =20.14677/10





  theme(legend.position = c(.88,.2)) + ggtitle("                                              Sensitivity Analysis for Different Parameters") + 
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), 
        axis.line=element_line(colour = "black"))  + scale_y_continuous("T", sec.axis = sec_axis(~.*1)) 


put_payoffs_126_all_final = put_payoffs_126_all
for (i in 1:length(put_payoffs_126_all_final)) if(put_payoffs_126_all_final[i]>0) put_payoffs_126_all_final[i] = 161.2675
  
put_payoffs_126_all_final_df = data.frame(1:10000, put_payoffs_126_all_final)
head(put_payoffs_126_all_final_df)

ggplot(put_payoffs_126_all_final_df) + aes(x=put_payoffs_126_all_final)

hist(put_payoffs_126_all_final_df)

density(put_payoffs_126_all_final_df$put_payoffs_126_all_final)
  
#Kernal density estimation

N=8000
head(put_payoffs_126_all_df)
put_payoffs_126_all_df = data.frame(1:10000, put_payoffs_126_all)

head(put_payoffs_126_all_df)
ggplot(put_payoffs_126_all_df, aes(x=put_payoffs_126_all)) + labs(y = "Count", x="Issuer payoff ($) ") + geom_histogram(binwidth = 60, color = "deepskyblue2", fill = "deepskyblue2") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), 
        axis.line=element_line(colour = "black")) + ggtitle("6 month payoff distribution") +theme(plot.title = element_text(hjust=0.5))  #+ geom_density(col = "red")

library("ggplot2")

ggplot(put_payoffs_126_all_df, aes(x=put_payoffs_126_all)) + 
  labs(y = "Density", x="Issuer payoff ($) ") + 
  geom_histogram(aes(y= ..density..) , binwidth = 60, color = "deepskyblue2", fill = "deepskyblue2") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),    axis.line=element_line(colour = "black")) +
  ggtitle("Figure 9: 6 month profit/loss distribution and estimated densities") +theme(plot.title = element_text(hjust=0.5))  + 
  geom_density(col = "yellow", kernel = "gaussian", lwd=3, aes(y=..density..)) + 
  geom_density(col = "red", kernel = "biweight", lwd=1, aes(y=..density..)) + 
  geom_density(col = "orange", kernel = "epanechnikov", lwd=1.5, lty = 2, aes(y=..density..)) + 
    scale_y_continuous(sec.axis = sec_axis(~.*600000, name = "Count")) + 
  theme(legend.position="topleft") + scale_color_manual(values=col)




#ggplot(put_payoffs_126_all_df, aes(x=put_payoffs_126_all)) + 
#  labs(y = "Density", x="Issuer Payoff ($) ") + 
#  geom_histogram(aes(y= ..density..) , binwidth = 60, color = "deepskyblue2", fill = "deepskyblue2") +
#  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),    axis.line=element_line(colour = "black")) +
#  ggtitle("6 month Payoff Distribution Histogram and Density Estimations") +theme(plot.title = element_text(hjust=0.5))  + 
#  geom_density(col = "orange", kernel = "epanechnikov", lwd=2, aes(y=..density..)) + 
#  geom_density(col = "green", kernel = "rectangular", lwd=1, aes(y=..density..)) + 
#  scale_y_continuous(sec.axis = sec_axis(~.*600000, name = "Count")) + 
#  theme(legend.position="topleft") + scale_color_manual(values=col)







ggplot(put_payoffs_126_all_df, aes(x=put_payoffs_126_all)) + geom_histogram(aes(y=..density..), bins=50) + geom_density(col = "red")



ggplot(put_payoffs_126_all_df, aes(x=put_payoffs_126_all)) + geom_density(kernel = "biweight")


ggplot(stat_density(data = put_payoffs_126_all_df))

gghistogram(put_payoffs_126_all)

head(put_payoffs_126_all_df)
ggplot(put_payoffs_126_all_df, aes(x=put_payoffs_126_all))

VaR_density_fit_126_gaussian = density(put_payoffs_126_all, kernel = "gaussian")
new_payoffs_126 = rnorm(10000, sample(put_payoffs_126_all, size=10000, replace=TRUE), fit$bw)

sum((new_payoffs_126>0))

ggplot(VaR_density_fit_126_gaussian)

plot(VaR_density_fit_126_gaussian, main = "Density Plot of Biomass European Put Payoffs and Kernal Density Estimations", xlab = "Issuer Payoff ($)")
lines(VaR_density_fit_126_biweight, col="blue")

lines(density(new_payoffs_126), col = "blue")
legend("topleft", legend=c("Density: ", " dfdf: eere"), lty=c(2,3), cex=0.8)
legend("topleft", legend=c("Growth: Black","Sigma: Blue", "Milstein: Black"), lty=6,5,1, cex = 0.8)


VaR_density_fit_126_biweight = density(put_payoffs_126_all, kernel = "biweight")
plot(VaR_density_fit_126_biweight)
lines(density(new_payoffs_126), col = "blue")

VaR_density_fit_126_biweight
VaR_density_fit_126_gaussian




VaR_density_fit_126_biweight_true = density(put_payoffs_126_true, kernel = "biweight")

    
     mean(sample(rnorm(10000,0,VaR_density_fit_126_biweight$bw)))


mean_sample_biweight = c()
for (i in 1:50000) mean_sample_biweight = append(mean_sample_biweight,mean(rnorm(10000, sample(put_payoffs_126_all, size = 10000, replace= TRUE), VaR_density_fit_126_biweight$bw)))
mean(mean_sample_biweight)
min(mean_sample_biweight)


mean_sample_gaussian = c()
for (i in 1:50000) mean_sample_gaussian = append(mean_sample_gaussian,mean(rnorm(10000, sample(put_payoffs_126_all, size = 10000, replace= TRUE), VaR_density_fit_126_gaussian$bw)))
mean(mean_sample_gaussian)
max(mean_sample_gaussian);min(mean_sample_gaussian)
   
#quantile(payoffs_new, c(0.01,0.05,0.10,0.9,0.95))
#1%           5%        10%        90%        95% 
#-1760.4849   -1132.5289  -802.7325   695.1475   817.8291 
#95% percentile is a loss of 1,132. 95% cofnident that I will not lose over 1132 within 6 month period

#require(graphics)
#
#plot(var_density)
#lines(density(payoffs_new), col = "blue")

VaR_density_fit_126_epa = density(put_payoffs_126_all_final, kernel = "epanechnikov")

mean_profit = c()
for (i in 1:50000) {
epa_sample = sample(rnorm(10000,0,VaR_density_fit_126_epa$bw))

epa_sample_negative_sum = 0
for (i in 1:length(epa_sample)) if (epa_sample[i]<0) epa_sample_negative_sum = epa_sample_negative_sum + epa_sample[i]

epa_sample_positive_count = 0
for (i in 1:length(epa_sample)) if (epa_sample[i]>0) epa_sample_positive_count = epa_sample_positive_count + 1

mean_profit = append(mean_profit, (epa_sample_positive_count * mean(put_prices_126) + epa_sample_negative_sum ) / 10000)
}

mean(mean_profit)


mean_profit_g = c()
max_profit_g = c()
for (i in 1:50000) {
  g_sample = sample(rnorm(10000,0,VaR_density_fit_126_gaussian$bw))
  
  g_sample_negative_sum = 0
  for (i in 1:length(g_sample)) if (g_sample[i]<0) g_sample_negative_sum=g_sample_negative_sum+g_sample[i]
  
  g_sample_positive_count = 0
  for (i in 1:length(g_sample)) if (g_sample[i]>0) g_sample_positive_count = g_sample_positive_count + 1
  
  mean_profit_g = append(mean_profit_g, (g_sample_positive_count * mean(put_prices_126) + g_sample_negative_sum ) / 10000)

  max_profit_g = append(max_profit_g, g_sample_positive_count* mean(put_prices_126))
  }

mean(mean_profit_g)
max(mean_profit_g)
min(mean_profit_g)



mean_profit_b = c()
max_profit_b = c()
for (i in 1:50000) {
  b_sample = sample(rnorm(10000,0,VaR_density_fit_126_biweight$bw))
  
  b_sample_negative_sum = 0
  for (i in 1:length(b_sample)) if (b_sample[i]<0) b_sample_negative_sum=b_sample_negative_sum+b_sample[i]
  
  b_sample_positive_count = 0
  for (i in 1:length(b_sample)) if (b_sample[i]>0) b_sample_positive_count = b_sample_positive_count + 1
  
  mean_profit_b = append(mean_profit_b, (b_sample_positive_count * mean(put_prices_126) + b_sample_negative_sum ) / 10000)

  max_profit_b = append(max_profit_b, b_sample_positive_count* mean(put_prices_126))
  
  }

mean(mean_profit_b)
mean(max_profit_b)


VaR_density_fit_126_rec = density(put_payoffs_126_all, kernel = "rectangular")














VaR_density_fit_126_biweight_true = density(put_payoffs_126_true, kernel = "biweight")
VaR_density_fit_126_epi_true = density(put_payoffs_126_true, kernel = "epanechnikov")
VaR_density_fit_126_gaussian_true = density(put_payoffs_126_true, kernel = "gaussian")



mean_profit_e_true = c()
max_profit_e_true = c()
for (i in 1:50000) {
  e_sample_true = sample(rnorm(10000,0,VaR_density_fit_126_epi_true$bw))
  
  e_sample_negative_sum_true = 0
  for (i in 1:length(e_sample_true)) if (e_sample_true[i]<0) e_sample_negative_sum_true=e_sample_negative_sum_true+e_sample_true[i]
  
  e_sample_positive_count_true = 0
  for (i in 1:length(e_sample_true)) if (e_sample_true[i]>0) e_sample_positive_count_true = e_sample_positive_count_true + 1
  
  mean_profit_e_true = append(mean_profit_e_true, (e_sample_positive_count_true * mean(put_prices_126) + e_sample_negative_sum_true ) / 10000)
  
  max_profit_e_true = append(max_profit_e_true, e_sample_positive_count_true* mean(put_prices_126))
  
}



mean(mean_profit_e_true) #mean profit


mean(put_payoffs_126_true)

min(put_payoffs_126_true)
max(mean_profit_b_true)
min(b_sample_true)





mean_profit_g_true = c()
max_profit_g_true = c()
for (i in 1:50000) {
  g_sample_true = sample(rnorm(10000,0,VaR_density_fit_126_gaussian_true$bw))
  
  g_sample_negative_sum_true = 0
  for (i in 1:length(g_sample_true)) if (g_sample_true[i]<0) g_sample_negative_sum_true=g_sample_negative_sum_true+g_sample_true[i]
  
  g_sample_positive_count_true = 0
  for (i in 1:length(g_sample_true)) if (g_sample_true[i]>0) g_sample_positive_count_true = g_sample_positive_count_true + 1
  
  mean_profit_g_true = append(mean_profit_g_true, (g_sample_positive_count_true * mean(put_prices_126) + g_sample_negative_sum_true ) / 10000)
  
  max_profit_g_true = append(max_profit_g_true, g_sample_positive_count_true* mean(put_prices_126))
  
}



mean(mean_profit_g_true) #mean profit




## BOOTSTRAPPING

summary(put_payoffs_126_all)

summary(put_payoffs_126_true)

quantile_one_percent = c()
quantile_five_percent = c()
quantile_ten_percent = c()

q1_percent = c()
q5_percent = c()
q10_percent = c()
VaR_quantiles_true = data.frame(1:50000)


VaR_quantiles = data.frame(1:50000)

system.time(
for (i in 1:50000) {
payoff_sample = sample(put_payoffs_126_all,7000,replace= TRUE)
quantile_one_percent  = append(quantile_one_percent, quantile(payoff_sample, 0.01))
quantile_five_percent = append(quantile_five_percent,quantile(payoff_sample, 0.05))
quantile_ten_percent = append(quantile_ten_percent, quantile(payoff_sample, 0.10))
} )
#user   system elapsed 
#93.76    0.25   94.25 
VaR_quantiles = VaR_quantiles %>% add_column(quantile_one_percent)
VaR_quantiles = VaR_quantiles %>% add_column(quantile_five_percent)
VaR_quantiles = VaR_quantiles %>% add_column(quantile_ten_percent)

head(VaR_quantiles)

VaR_quantiles %>% rename ("Sample #" = X1.50000, "1%" = quantile_one_percent, "5%" = quantile_five_percent, "10%" = quantile_ten_percent)


head(VaR_quantiles)

system.time(
  for (i in 1:50000) {
    payoff_sample_true = sample(put_payoffs_126_true,7000,replace= TRUE)
    q1_percent = append(q1_percent, quantile(payoff_sample_true, 0.01))
    q5_percent = append(q5_percent,quantile(payoff_sample_true, 0.05))
    q10_percent = append(q10_percent, quantile(payoff_sample_true, 0.10))
  } )
#user   system elapsed 
#93.76    0.25   94.25 
VaR_quantiles_true = data.frame(1:50000)
VaR_quantiles_true = VaR_quantiles_true %>% add_column(q1_percent)
VaR_quantiles_true = VaR_quantiles_true %>% add_column(q5_percent)
VaR_quantiles_true = VaR_quantiles_true %>% add_column(q10_percent)

head(VaR_quantiles_true)

VaR_quantiles_true %>% rename ("Sample #" = X1.50000, "1%" = q1_percent, "5%" = q5_percent, "10%" = q10_percent)


head(VaR_quantiles_true)




VaR_one_percent_statistics = t.test(VaR_quantiles$quantile_one_percent) ; VaR_one_percent_statistics
VaR_one_percent_statistics$estimate
VaR_one_percent_statistics$conf.int #CI Bounds
VaR_one_percent_statistics$stderr #standard error

VaR_five_percent_statistics = t.test(VaR_quantiles$quantile_five_percent) ; VaR_five_percent_statistics
VaR_five_percent_statistics$estimate
VaR_five_percent_statistics$conf.int #CI Bounds
VaR_five_percent_statistics$stderr #standard error


VaR_ten_percent_statistics = t.test(VaR_quantiles$quantile_ten_percent) ; VaR_ten_percent_statistics
VaR_ten_percent_statistics$estimate
VaR_ten_percent_statistics$conf.int #CI Bounds
VaR_ten_percent_statistics$stderr #standard error

#new_payoffs_126 = rnorm(N, sample(put_payoffs_126_all, size=8000, replace=TRUE), fit$bw)





VaR_q1_statistics = t.test(VaR_quantiles_true$q1_percent) ; VaR_q1_statistics
VaR_q1_statistics$estimate
VaR_q1_statistics$conf.int #CI Bounds
VaR_q1_statistics$stderr #standard error

VaR_q5_statistics = t.test(VaR_quantiles_true$q5_percent) ; VaR_q5_statistics
VaR_q5_statistics$estimate
VaR_q5_statistics$conf.int #CI Bounds
VaR_q5_statistics$stderr #standard error

VaR_q10_statistics = t.test(VaR_quantiles_true$q10_percent) ; VaR_q10_statistics
VaR_q10_statistics$estimate
VaR_q10_statistics$conf.int #CI Bounds
VaR_q10_statistics$stderr #standard error






## point mass distribution

2+2
plot(1:10)
x = c(-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,15,15,15,15,15,15,15,15,15,15)
y = c(1,1.5,2.2,3.1,4.2,5.5,7,8.6,9.3,11.4,13.5,5,5,5,5,5,5,5,5,5,5)
plot(x,y)
point_mass_data = data.frame(x,y)
plot(point_mass_data, type = "l")
plot(density(point_mass_data))

density_fit_constant_data_attempt = density(x, kernel = "biweight")
plot(density_fit_constant_data_attempt)

##if payoff is 0, issuer gets money


put_payoffs_126_true = put_payoffs_126_all

for (i in 1:length(put_payoffs_126_true)) if (put_payoffs_126_true[i]>=0) put_payoffs_126_true[i]=euro_reg_put_price_126

#euro_reg_put_price_126 = mean(put_prices_126)

mean(put_payoffs_126_true)
plot(put_payoffs_126_true)

hist(put_payoffs_126_true)


put_payoffs_126_true_df = data.frame("n" = 1:10000, "true_payoff" = put_payoffs_126_true)
head(put_payoffs_126_true_df)










head(put_payoffs_126_all_df)

ggplot(put_payoffs_126_all_df, aes(x=put_payoffs_126_all)) + labs(y = "Count", x="Issuer payoff ($) ") + geom_histogram(binwidth = 60, color = "deepskyblue2", fill = "deepskyblue2") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), 
        axis.line=element_line(colour = "black")) + 
  ggtitle(expression("6 month European put neutral payoff distribution" )) +
            theme(plot.title = element_text(hjust=0.5))  #+ geom_density(col = "red")

#ggtitle(expression("6 month payoff distribution based on K-S"[T]*" only" )) 

library("ggplot2")

ggplot(put_payoffs_126_all_df, aes(x=put_payoffs_126_all)) + 
  labs(y = "Density", x="Issuer payoff ($) ") + 
  geom_histogram(aes(y= ..density..) , binwidth = 60, color = "deepskyblue2", fill = "deepskyblue2") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),    axis.line=element_line(colour = "black")) +
  ggtitle("Figure 9: 6 month profit/loss distribution and estimated densities") +theme(plot.title = element_text(hjust=0.5))  + 
  geom_density(col = "yellow", kernel = "gaussian", lwd=3, aes(y=..density..)) + 
  geom_density(col = "red", kernel = "biweight", lwd=1, aes(y=..density..)) + 
  geom_density(col = "orange", kernel = "epanechnikov", lwd=1.5, lty = 2, aes(y=..density..)) + 
  scale_y_continuous(sec.axis = sec_axis(~.*600000, name = "Count")) + 
  theme(legend.position="topleft") + scale_color_manual(values=col)




ggplot(put_payoffs_126_true_df, aes(x=true_payoff)) + 
  labs(y = "Density", x="Issuer payoff ($) ") + 
  geom_histogram(aes(y= ..density..) , binwidth = 60, color = "deepskyblue2", fill = "deepskyblue2") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),    axis.line=element_line(colour = "black")) +
  ggtitle("6 month European put true payoff distribution") +theme(plot.title = element_text(hjust=0.5)) +
  theme(legend.position="topleft") + scale_color_manual(values=col)+ 
  scale_y_continuous(sec.axis = sec_axis(~.*600000, name = "Count")) 


install.packages("patchwork")
library("patchwork")

ggplot(put_payoffs_126_true_df, aes(x=true_payoff)) + 
  labs(y = "Density", x="Issuer payoff ($) ") + 
  geom_histogram(aes(y= ..density..) , binwidth = 60, color = "deepskyblue2", fill = "deepskyblue2") +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),    axis.line=element_line(colour = "black")) +
  ggtitle("6 month European put true payoff distribution and estimated densities") +theme(plot.title = element_text(hjust=0.5))  + 
  geom_density(col = "yellow", kernel = "gaussian", lwd=3, aes(y=..density..)) + 
  geom_density(col = "red", kernel = "biweight", lwd=1, aes(y=..density..)) + 
  geom_density(col = "orange", kernel = "epanechnikov", lwd=1.5, lty = 2, aes(y=..density..)) + 
  scale_y_continuous(sec.axis = sec_axis(~.*600000, name = "Count"))+
  theme(legend.position="topleft") + scale_color_manual(values=col) 







## CONTROL VARIABLES -----










## AMERICAN OPTIONS ROUGH ----

K_Strike_126_fixed


##say monthly

biomasss



view(biomass_sln)


biomass_sln[1,] #row
biomass_sln[,1] #column

K_Strike_126_fixed
biomass_6m_6_steps_paths = biomass_for_options[c(1,22,43,64,85,126),]
biomass_6m_6_steps_paths[,1]

head(biomass_6m_6_steps_paths)



fixed_interest_rate = 0.04


head(biomass_for_options)[,1]
mean(biomass_for_options[126,])




head((biomass_6m_6_steps_paths))
head(t(biomass_6m_6_steps_paths))

biomass_6m_6_steps_paths_transposed = t(biomass_6m_6_steps_paths)
head(biomass_6m_6_steps_paths_transposed)

biomass_6m_6_steps_paths_transposed[,1] #10's
biomass_6m_6_steps_paths_transposed[1,] #first path


put_prices_a = c()


##DO A DOUBLE LOOP! ONE FOR THE DIFFERENT TIME STEPS, ANOTHER FOR THE DIFFERENT BIOMASS PATHS

for (j in 1:10000) {
  option_value_time_6 = pmax(K_Strike_126_fixed - biomass_6m_6_steps_paths_transposed[j,6],0)
  option_value_time_5 = pmax(option_value_time_6*exp(-fixed_interest_rate * (6/12-5/12)), K_Strike_126_fixed - biomass_6m_6_steps_paths_transposed[j,5])
  option_value_time_4 = pmax(option_value_time_5*exp(-fixed_interest_rate * (5/12-4/12)), K_Strike_126_fixed - biomass_6m_6_steps_paths_transposed[j,4])
  option_value_time_3 = pmax(option_value_time_4*exp(-fixed_interest_rate * (4/12-3/12)), K_Strike_126_fixed - biomass_6m_6_steps_paths_transposed[j,3])
  option_value_time_2 = pmax(option_value_time_3*exp(-fixed_interest_rate * (3/12-2/12)), K_Strike_126_fixed - biomass_6m_6_steps_paths_transposed[j,2])
  option_value_time_1 = pmax(option_value_time_2*exp(-fixed_interest_rate * (2/12-1/12)), K_Strike_126_fixed - biomass_6m_6_steps_paths_transposed[j,1])
  option_value = option_value_time_1
  put_prices_a = append(put_prices_a, option_value)
}

mean(put_prices_a)
max(put_prices_a)
head(put_prices_a)


#TEST APPROVED BY EXCEL
option_value_time_61 = pmax(K_Strike_126_fixed - biomass_6m_6_steps_paths_transposed[1,6],0) ; option_value_time_61
option_value_time_51 = pmax(option_value_time_61*exp(-fixed_interest_rate * (6/12-5/12)), K_Strike_126_fixed - biomass_6m_6_steps_paths_transposed[1,5]) ; option_value_time_51
option_value_time_41 = pmax(option_value_time_51*exp(-fixed_interest_rate * (5/12-4/12)), K_Strike_126_fixed - biomass_6m_6_steps_paths_transposed[1,4]) ; option_value_time_41
option_value_time_31 = pmax(option_value_time_41*exp(-fixed_interest_rate * (4/12-3/12)), K_Strike_126_fixed - biomass_6m_6_steps_paths_transposed[1,3]) ; option_value_time_31
option_value_time_21 = pmax(option_value_time_31*exp(-fixed_interest_rate * (3/12-2/12)), K_Strike_126_fixed - biomass_6m_6_steps_paths_transposed[1,2]) ; option_value_time_21
option_value_time_11 = pmax(option_value_time_21*exp(-fixed_interest_rate * (2/12-1/12)), K_Strike_126_fixed - biomass_6m_6_steps_paths_transposed[1,1]) ; option_value_time_11
option_value = option_value_time_11;option_value




head(biomass_6m_6_steps_paths_transposed)








single_option_value = c()
put_prices_american = c()
single_option_paths = data.frame(1:6)


##WORKING
system.time( for (j in 1:10000) {
    
    single_option_value = c()
    for (k in 6:1)  {
      
      if (k==6) single_option_value[k] = pmax(100*(K_Strike_126_fixed - biomass_6m_6_steps_paths_transposed[j,k]),0)
      if (k!=6) single_option_value[k] = pmax((single_option_value[k+1]*exp(-fixed_interest_rate * (1/12))), 100*(K_Strike_126_fixed - biomass_6m_6_steps_paths_transposed[j,k] ))
      }
    single_option_paths = single_option_paths%>% add_column(single_option_value)
    put_prices_american = append(put_prices_american, single_option_value[1])
    
    
    }
)
single_option_paths = subset( single_option_paths, select = -c(1) )



#user  system elapsed 
#45.77    0.15   46.03


head(t(single_option_paths))

head(put_prices_american)



interest_rates2 = replicate(10000, simpson_interest_rate(vasicek(0.025,0.0463,0.3,0.05,0.5)$r, 0.5))

complete_interest_rates = replicate(10000, vasicek(0.025,0.0463,0.3,0.05,0.5)$r, 0.5)
int_rate_example = complete_interest_rates[,1]










## AMERICAN OPTIONS FINAL ----


K_Strike_126_fixed
view(biomass_for_options)
biomass_for_options[1,] #row
biomass_for_options[,1] #column
mean(biomass_for_options[126,])


view(biomass_for_options)
biomass_for_options_t <- as.data.frame(t(biomass_for_options))
view(biomass_for_options_t)

single_option_value_126 = c()
put_prices_american_126 = c()
single_option_paths_126 = data.frame(1:126)

##WORKING

interest_rate
interest_rate_1y


library("tidyverse")

## ORDINARY DYNAMIC PROGRAMMING
system.time( for (j in 1:10000) {
  
  single_option_value_126 = c()
  for (k in 126:1)  {
    
    if (k==126) single_option_value_126[k] = pmax(1*(K_Strike_126_fixed - biomass_for_options_t[j,k]),0)
    if (k!=126) single_option_value_126[k] = pmax((single_option_value_126[k+1]*exp(-interest_rate[k] * (1/252))), 1*(K_Strike_126_fixed - biomass_for_options_t[j,k] ))
  }
  single_option_paths_126 = single_option_paths_126%>% add_column(single_option_value_126)
  put_prices_american_126 = append(put_prices_american_126, single_option_value_126[1])
} )

#user  system elapsed     #user  system elapsed       #user  system elapsed       #user  system elapsed 
#72.93    0.36   73.59    #89.14    0.04   89.36      #54.31 0.03   54.91         #72.76 0.28   73.10

single_option_paths_126 = subset( single_option_paths_126, select = -c(1) )
view(single_option_paths_126)

put_prices_dp_126_statistics = t.test(put_prices_american_126)

put_prices_dp_126_statistics$estimate
put_prices_dp_126_statistics$stderr*100
put_prices_dp_126_statistics$conf.int
  

view(single_option_paths_126)





K_Strike_252_fixed
biomass_for_options_1y[1,] #row
biomass_for_options_1y[,1] #column

biomass_for_options_t_1y <- as.data.frame(t(biomass_for_options_1y))

mean(biomass_for_options_t_1y[,252])

single_option_value_252 = c()
put_prices_american_252 = c()
single_option_paths_252 = data.frame(1:252)


##WORKING

interest_rate_1y

system.time( for (j in 1:10000) {
  
  single_option_value_252 = c()
  for (k in 252:1)  {
    
    if (k==252) single_option_value_252[k] = pmax(1*(K_Strike_252_fixed - biomass_for_options_t_1y[j,k]),0)
    if (k!=252) single_option_value_252[k] = pmax((single_option_value_252[k+1]*exp(-interest_rate_1y[k] * (1/252))), 1*(K_Strike_252_fixed - biomass_for_options_t_1y[j,k] ))
  }
  single_option_paths_252 = single_option_paths_252%>% add_column(single_option_value_252)
  put_prices_american_252 = append(put_prices_american_252, single_option_value_252[1])
} )

#user  system elapsed       #user  system elapsed 
#92.36    0.09   92.78      #98.30    0.11  98.67 




single_option_paths_252 = subset( single_option_paths_252, select = -c(1) )


put_prices_dp_252_statistics = t.test(put_prices_american_252)

put_prices_dp_252_statistics$estimate
put_prices_dp_252_statistics$stderr *100 
put_prices_dp_252_statistics$conf.int

put_prices_dp_252_statistics$conf.int[2]/put_prices_dp_252_statistics$estimate-1


t.test(put_prices_american_252)











 




## 6 month 6 steps

single_option_value_6 = c()
put_prices_american_6 = c()
single_option_paths_6 = data.frame(1:6)

interest_rate
length(interest_rate)
#view(interest_rate)
ncol(biomass_for_options_t)

#(1,26,51,76,101,126)
interest_rate_6m_6s_1 = interest_rate[1:25] ; interest_rate_6m_6s_1 = simpson_interest_rate_time_step(interest_rate_6m_6s_1)
interest_rate_6m_6s_2 = interest_rate[26:50]; interest_rate_6m_6s_2 = simpson_interest_rate_time_step(interest_rate_6m_6s_2)
interest_rate_6m_6s_3 = interest_rate[51:75]; interest_rate_6m_6s_3 = simpson_interest_rate_time_step(interest_rate_6m_6s_3)
interest_rate_6m_6s_4 = interest_rate[76:100];interest_rate_6m_6s_4 = simpson_interest_rate_time_step(interest_rate_6m_6s_4) 
interest_rate_6m_6s_5 = interest_rate[101:126];interest_rate_6m_6s_5 = simpson_interest_rate_time_step(interest_rate_6m_6s_5)

interest_rate_6m_6s = c(interest_rate[1], interest_rate_6m_6s_1, interest_rate_6m_6s_2, interest_rate_6m_6s_3, interest_rate_6m_6s_4, interest_rate_6m_6s_5)
remove(interest_rate_6m_6s_1,interest_rate_6m_6s_2,interest_rate_6m_6s_3,interest_rate_6m_6s_4,interest_rate_6m_6s_5)


system.time( for (j in 1:10000) {
  
  single_option_value_6 = c()
  for (k in 6:1)  {
    
    if (k==6) single_option_value_6[k] = pmax(1*(K_Strike_126_fixed - biomass_for_options_t[j,25*(k-1)+1]),0)
    if (k!=6) single_option_value_6[k] = pmax((single_option_value_6[k+1]*exp(-interest_rate_6m_6s[k] * (1/252))), 1*(K_Strike_126_fixed - biomass_for_options_t[j,25*(k-1)+1] ))
  }
  single_option_paths_6 = single_option_paths_6%>% add_column(single_option_value_6)
  put_prices_american_6 = append(put_prices_american_6, single_option_value_6[1])
} )

#user  system elapsed     #user  system elapsed       #user  system elapsed 
#47.67   0.47   48.19     47.33   0.18    47.79

single_option_paths_6 = subset( single_option_paths_6, select = -c(1) )
view(single_option_paths_6)
100*mean(put_prices_american_6)
100*sd(put_prices_american_6)
100*sd(put_prices_american_6) / sqrt(10000-1) ##standard error is very small

100*sum(single_option_paths_6[1,])/10000 #1030.28

t.test(100*put_prices_american_6) #1030.28






## 6 month 12 steps

single_option_value_12 = c()
put_prices_american_12 = c()
single_option_paths_12 = data.frame(1:12)

interest_rate
length(interest_rate)
#view(interest_rate)
ncol(biomass_for_options_t)

#(1,26,51,76,101,126)
#(1,13,25,37,49,61,73,85,97,109,121,126)
#biomass_for_options_t[j,12*(k-1)]

#(1,26,51,76,101,126)
interest_rate_6m_12s_1 = interest_rate[1:12] ; interest_rate_6m_12s_1 = simpson_interest_rate_time_step(interest_rate_6m_12s_1)
interest_rate_6m_12s_2 = interest_rate[13:24]; interest_rate_6m_12s_2 = simpson_interest_rate_time_step(interest_rate_6m_12s_2)
interest_rate_6m_12s_3 = interest_rate[25:36]; interest_rate_6m_12s_3 = simpson_interest_rate_time_step(interest_rate_6m_12s_3)
interest_rate_6m_12s_4 = interest_rate[37:48];interest_rate_6m_12s_4 = simpson_interest_rate_time_step(interest_rate_6m_12s_4) 
interest_rate_6m_12s_5 = interest_rate[49:60];interest_rate_6m_12s_5 = simpson_interest_rate_time_step(interest_rate_6m_12s_5)
interest_rate_6m_12s_6 = interest_rate[61:72] ; interest_rate_6m_12s_6 = simpson_interest_rate_time_step(interest_rate_6m_12s_6)
interest_rate_6m_12s_7 = interest_rate[73:84]; interest_rate_6m_12s_7 = simpson_interest_rate_time_step(interest_rate_6m_12s_7)
interest_rate_6m_12s_8 = interest_rate[85:96]; interest_rate_6m_12s_8 = simpson_interest_rate_time_step(interest_rate_6m_12s_8)
interest_rate_6m_12s_9 = interest_rate[97:108];interest_rate_6m_12s_9 = simpson_interest_rate_time_step(interest_rate_6m_12s_9) 
interest_rate_6m_12s_10 = interest_rate[109:120];interest_rate_6m_12s_10 = simpson_interest_rate_time_step(interest_rate_6m_12s_10)
interest_rate_6m_12s_11 = interest_rate[121:126];interest_rate_6m_12s_11 = simpson_interest_rate_time_step(interest_rate_6m_12s_11) 



interest_rate_6m_12s = c(interest_rate[1], interest_rate_6m_12s_1, interest_rate_6m_12s_2, interest_rate_6m_12s_3, interest_rate_6m_12s_4, 
                                           interest_rate_6m_12s_5, interest_rate_6m_12s_6, interest_rate_6m_12s_7, interest_rate_6m_12s_8, 
                                           interest_rate_6m_12s_9, interest_rate_6m_12s_10, interest_rate_6m_12s_11)
remove( interest_rate_6m_12s_1, interest_rate_6m_12s_2, interest_rate_6m_12s_3, interest_rate_6m_12s_4, 
        interest_rate_6m_12s_5, interest_rate_6m_12s_6, interest_rate_6m_12s_7, interest_rate_6m_12s_8, 
        interest_rate_6m_12s_9, interest_rate_6m_12s_10, interest_rate_6m_12s_11)
 #                                                                                                                                     120,108,96,84,72,60,48,36,24,12,1
                                                                                                  

system.time( for (j in 1:10000) {
  
  single_option_value_12 = c()
  for (k in 12:1)  {
    
     if (k==12) single_option_value_12[k] = pmax(1*(K_Strike_126_fixed - biomass_for_options_t[j,126]),0)                                     #k 11:2
     if (k!= 1 & k!=12) single_option_value_12[k] = pmax((single_option_value_12[k+1]*exp(-interest_rate_6m_12s[k] * (1/252))), 1*(K_Strike_126_fixed - biomass_for_options_t[j,12*(k-1)] ))
     if (k==1) single_option_value_12[k] = pmax((single_option_value_12[k+1]*exp(-interest_rate_6m_12s[k] * (1/252))), 1*(K_Strike_126_fixed - biomass_for_options_t[j,1] ))
     } 
  single_option_paths_12 = single_option_paths_12%>% add_column(single_option_value_12)
  put_prices_american_12 = append(put_prices_american_12, single_option_value_12[1])
} )


#user  system elapsed     #user  system elapsed       #user  system elapsed 
#51.02   0.00   51.14     

single_option_paths_12 = subset( single_option_paths_12, select = -c(1) )
view(single_option_paths_12)
100*mean(put_prices_american_12)
100*sd(put_prices_american_12)
100*sd(put_prices_american_12) / sqrt(10000-1) ##standard error is very small

100*sum(single_option_paths_12[1,])/10000 #1039.191

t.test(100*put_prices_american_12) #1039.191





## 6 months 26 steps


single_option_value_21 = c()
put_prices_american_21 = c()
single_option_paths_21 = data.frame(1:22)

interest_rate
length(interest_rate)
#view(interest_rate)
ncol(biomass_for_options_t)

#(1,7,13,19,25,31,37,43,49,55,61,67,73,79,85,91,97,103,109,115,121,126)
interest_rate_6m_21s_1 = interest_rate[1:6] ; interest_rate_6m_21s_1 = simpson_interest_rate_time_step(interest_rate_6m_21s_1)
interest_rate_6m_21s_2 = interest_rate[7:12]; interest_rate_6m_21s_2 = simpson_interest_rate_time_step(interest_rate_6m_21s_2)
interest_rate_6m_21s_3 = interest_rate[13:18]; interest_rate_6m_21s_3 = simpson_interest_rate_time_step(interest_rate_6m_21s_3)
interest_rate_6m_21s_4 = interest_rate[19:24];interest_rate_6m_21s_4 = simpson_interest_rate_time_step(interest_rate_6m_21s_4) 
interest_rate_6m_21s_5 = interest_rate[25:30];interest_rate_6m_21s_5 = simpson_interest_rate_time_step(interest_rate_6m_21s_5)
interest_rate_6m_21s_6 = interest_rate[31:36] ; interest_rate_6m_21s_6 = simpson_interest_rate_time_step(interest_rate_6m_21s_6)
interest_rate_6m_21s_7 = interest_rate[37:42]; interest_rate_6m_21s_7 = simpson_interest_rate_time_step(interest_rate_6m_21s_7)
interest_rate_6m_21s_8 = interest_rate[43:48]; interest_rate_6m_21s_8 = simpson_interest_rate_time_step(interest_rate_6m_21s_8)
interest_rate_6m_21s_9 = interest_rate[49:54];interest_rate_6m_21s_9 = simpson_interest_rate_time_step(interest_rate_6m_21s_9) 
interest_rate_6m_21s_10 = interest_rate[55:60];interest_rate_6m_21s_10 = simpson_interest_rate_time_step(interest_rate_6m_21s_10)
interest_rate_6m_21s_11 = interest_rate[61:66];interest_rate_6m_21s_11 = simpson_interest_rate_time_step(interest_rate_6m_21s_11) 
interest_rate_6m_21s_12 = interest_rate[67:72] ; interest_rate_6m_21s_12 = simpson_interest_rate_time_step(interest_rate_6m_21s_12)
interest_rate_6m_21s_13 = interest_rate[73:78]; interest_rate_6m_21s_13 = simpson_interest_rate_time_step(interest_rate_6m_21s_13)
interest_rate_6m_21s_14 = interest_rate[79:84]; interest_rate_6m_21s_14 = simpson_interest_rate_time_step(interest_rate_6m_21s_14)
interest_rate_6m_21s_15 = interest_rate[85:90];interest_rate_6m_21s_15 = simpson_interest_rate_time_step(interest_rate_6m_21s_15) 
interest_rate_6m_21s_16 = interest_rate[91:96];interest_rate_6m_21s_16 = simpson_interest_rate_time_step(interest_rate_6m_21s_16)
interest_rate_6m_21s_17 = interest_rate[97:102] ; interest_rate_6m_21s_17 = simpson_interest_rate_time_step(interest_rate_6m_21s_17)
interest_rate_6m_21s_18 = interest_rate[103:108]; interest_rate_6m_21s_18 = simpson_interest_rate_time_step(interest_rate_6m_21s_18)
interest_rate_6m_21s_19 = interest_rate[109:114]; interest_rate_6m_21s_19 = simpson_interest_rate_time_step(interest_rate_6m_21s_19)
interest_rate_6m_21s_20 = interest_rate[115:120];interest_rate_6m_21s_20 = simpson_interest_rate_time_step(interest_rate_6m_21s_20) 
interest_rate_6m_21s_21 = interest_rate[121:126];interest_rate_6m_21s_21 = simpson_interest_rate_time_step(interest_rate_6m_21s_21)



interest_rate_6m_21s = c(interest_rate[1],       interest_rate_6m_21s_1, interest_rate_6m_21s_2, interest_rate_6m_21s_3, 
                         interest_rate_6m_21s_4, interest_rate_6m_21s_5, interest_rate_6m_21s_6, interest_rate_6m_21s_7, 
                         interest_rate_6m_21s_8, interest_rate_6m_21s_9, interest_rate_6m_21s_10, interest_rate_6m_21s_11,
                         interest_rate_6m_21s_12,interest_rate_6m_21s_13, interest_rate_6m_21s_14, interest_rate_6m_21s_15, 
                         interest_rate_6m_21s_16, interest_rate_6m_21s_17, interest_rate_6m_21s_18, interest_rate_6m_21s_19, 
                         interest_rate_6m_21s_20, interest_rate_6m_21s_21)
remove( interest_rate_6m_21s_1, interest_rate_6m_21s_2, interest_rate_6m_21s_3, 
        interest_rate_6m_21s_4, interest_rate_6m_21s_5, interest_rate_6m_21s_6, interest_rate_6m_21s_7, 
        interest_rate_6m_21s_8, interest_rate_6m_21s_9, interest_rate_6m_21s_10, interest_rate_6m_21s_11,
        interest_rate_6m_21s_12,interest_rate_6m_21s_13, interest_rate_6m_21s_14, interest_rate_6m_21s_15, 
        interest_rate_6m_21s_16, interest_rate_6m_21s_17, interest_rate_6m_21s_18, interest_rate_6m_21s_19, 
        interest_rate_6m_21s_20, interest_rate_6m_21s_21, interest_rate_6m_21s_22)            #   120,108,96,84,72,60,48,36,21,12,1

remove(interest_rate_6m_21s)

system.time( for (j in 1:10000) {
  
  single_option_value_21 = c()
  for (k in 22:1)  {
                                                                                                                                                 ## 21 to 2 (1,7,13,19,25,31,37,43,49,55,61,67,73,79,85,91,97,103,109,115,121,126)
    if (k==22) single_option_value_21[k] = pmax(1*(K_Strike_126_fixed - biomass_for_options_t[j,126]),0)
    if (k!= 1 & k!=22) single_option_value_21[k] = pmax((single_option_value_21[k+1]*exp(-interest_rate_6m_21s[k] * (1/252))), 1*(K_Strike_126_fixed - biomass_for_options_t[j,6*(k-1)+1] ))
    if (k==1) single_option_value_21[k] = pmax((single_option_value_21[k+1]*exp(-interest_rate_6m_21s[k] * (1/252))), 1*(K_Strike_126_fixed - biomass_for_options_t[j,1] ))
  } 
  single_option_paths_21 = single_option_paths_21%>% add_column(single_option_value_21)
  put_prices_american_21 = append(put_prices_american_21, single_option_value_21[1])
} )


#user  system elapsed     #user  system elapsed       #user  system elapsed 
#50.97 0.50     51.56

single_option_paths_21 = subset( single_option_paths_21, select = -c(1) )
#view(single_option_paths_21)
100*mean(put_prices_american_21)
100*sd(put_prices_american_21)
100*sd(put_prices_american_21) / sqrt(10000-1) ##standard error is very small

100*sum(single_option_paths_21[1,])/10000 #1046.312

t.test(100*put_prices_american_21) #1046.312
















## AMERICAN OPTIONS INDICATOR ----

single_option_value_126i = c()
put_prices_american_126i = c()
single_option_paths_126i = data.frame(1:126)

system.time( for (j in 1:10000) {
  
  single_option_value_126i = c()
  for (k in 126:1)  {
    
    if (k==126) {
      if (K_Strike_126_fixed - biomass_for_options_t[j,k]>0) single_option_value_126i[k] = 1
      else                                                   single_option_value_126i[k] = 0
    }
    
    if (k!=126) {
      immediate_exercise = 0
      if (K_Strike_126_fixed - biomass_for_options_t[j,k]>0) immediate_exercise=1
      
      single_option_value_126i[k] = pmax((single_option_value_126i[k+1]*exp(-interest_rate[k] * (1/252))), immediate_exercise)
    }
      
  }
  
  
  single_option_paths_126i = single_option_paths_126i%>% add_column(single_option_value_126i)
  put_prices_american_126i = append(put_prices_american_126i, single_option_value_126i[1])
} )

#user  system elapsed 
#56.43    0.00   56.47 

##NOT MEANING ANYTHING

single_option_paths_126i = subset( single_option_paths_126i, select = -c(1) )
view(single_option_paths_126i)
100*mean(put_prices_american_126i)
100*sd(put_prices_american_126i)
100*sd(put_prices_american_126i) / sqrt(10000-1) ##standard error is very small

100*sum(single_option_paths_126i[1,])/10000

t.test(put_prices_american_126i)

view(single_option_paths_126i)






## LEAST SQUARES AND STOPPING TIMES ROUGH ----


stock_price = data.frame("t=0" = c(1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00),
                         "t=1" = c(1.09,1.16,1.22,0.93,1.11,0.76,0.92,0.88),
                         "t=2" = c(1.08,1.26,1.07,0.97,1.56,0.77,0.84,1.22),
                         "t=3" = c(1.34,1.54,1.03,0.92,1.52,0.90,1.01,1.34))

strike = 1.1
cash_flow_3 = c()
for (index in 1:8) cash_flow_3 = append(cash_flow_3, pmax(strike - stock_price[index,4],0))

discount = exp(-0.06)

cash_flow_3

Y_2= discount * cash_flow_3;Y_2

#X = stock_price[,3] ; X
#X = X[-c(2,5,8)] ; X
X_2 = c(rep(0,8))
for (i in 1:8) if (stock_price[i,3]<strike) X_2[i]=stock_price[i,3]

exercise_2 = c()
for (index in 1:8) exercise_2 = append(exercise_2, pmax(strike - stock_price[index,3],0))
exercise_2

to_remove_for_lm = c()
for (index in 1:8)   if (X_2[index]==0) to_remove_for_lm = append(to_remove_for_lm, index)

Y_2_for_lm = Y_2[-to_remove_for_lm]
X_2_for_lm = X_2[-to_remove_for_lm]  
#exercise_2 = exercise_2[-to_remove_for_lm]


intercept2=unname(lm(Y_2_for_lm~X_2_for_lm + I(X_2_for_lm^2))$coef[1])
x_1 = unname(lm(Y_2_for_lm~X_2_for_lm + I(X_2_for_lm^2))$coef[2])
x_2 = unname(lm(Y_2_for_lm~X_2_for_lm + I(X_2_for_lm^2))$coef[3])

continuation_2 = pmax(intercept2 + x_1 * X_2 + x_2 * X_2**2,0)
#pmax(-1.07 + 2.983 * X_2 -1.813 * X_2**2,0)
for (i in 1:8) if (continuation_2[i]==intercept2) continuation_2[i]=0
continuation_2

cash_flow_2 = c(rep(0,8))


for (index in 1:length(exercise_2)) {
  if(exercise_2[index] >= continuation_2[index]) {
    cash_flow_2[index] = exercise_2[index]
    cash_flow_3[index] = 0}
  #if (NA) {}
  #else {}
  }


cash_flow_2
cash_flow_3


X_1 = c(rep(0,8))
for (i in 1:8) if (stock_price[i,2]<strike) X_1[i]=stock_price[i,2]
X_1

Y_1= discount * cash_flow_2;Y_1

exercise_1 = c()
for (index in 1:8) exercise_1 = append(exercise_1, pmax(strike - stock_price[index,2],0))
exercise_1


to_remove_for_lm_1 = c()
for (index in 1:8)   if (X_1[index]==0) to_remove_for_lm_1 = append(to_remove_for_lm_1, index)

Y_1_for_lm = Y_1[-to_remove_for_lm_1]
X_1_for_lm = X_1[-to_remove_for_lm_1]  
#exercise_2 = exercise_2[-to_remove_for_lm]
exercise_1

intercept1=unname(lm(Y_1_for_lm~X_1_for_lm + I(X_1_for_lm^2))$coef[1])
x_11 = unname(lm(Y_1_for_lm~X_1_for_lm + I(X_1_for_lm^2))$coef[2])
x_12 = unname(lm(Y_1_for_lm~X_1_for_lm + I(X_1_for_lm^2))$coef[3])

continuation_1 = pmax(intercept1 + x_11 * X_1 +x_12 * X_1**2,0)
pmax(2.038 - 3.335 * X_1 + 1.356 * X_1**2,0)

for (i in 1:8) if (continuation_1[i]==intercept1) continuation_1[i]=0
continuation_1

cash_flow_1 = c(rep(0,8))
for (index in 1:length(exercise_1)) {
  if(exercise_1[index] >= continuation_1[index]) {
    cash_flow_1[index] = exercise_1[index]
    cash_flow_2[index] = 0}
  #if (NA) {}
  #else {}
}

cash_flow_1
cash_flow_2
cash_flow_3

stopping_time_1 = c(rep(0,8))
for (i in 1:8) if(cash_flow_1[i]!=0) stopping_time_1[i]=1

stopping_time_2 = c(rep(0,8))
for (i in 1:8) if(cash_flow_2!=0) stopping_time_2[i]=1

stopping_time_3 = c(rep(0,8))
for (i in 1:8) if(cash_flow_3[i]!=0) stopping_time_3[i]=1

stopping_time_1
stopping_time_2
stopping_time_3

cash_flow_df = data.frame(cash_flow_1,cash_flow_2,cash_flow_3)

sum(cash_flow_1*(1+0.06)^(-1))
sum(cash_flow_2*(1+0.06)^(-2))
sum(cash_flow_3*(1+0.06)^(-3))

sum((cash_flow_1*(1+0.06)^(-1) +cash_flow_2*(1+0.06)^(-2) +cash_flow_3*(1+0.06)^(-3))/8) #0.114658


remove(cash_flow_1,cash_flow_2,cash_flow_3,continuation,continuation_1,continuation_2,exercise_1,exercise_2,
       i,index,intercept,intercept1,intercept2,stopping_time_1,stopping_time_2,stopping_time_3,to_remove,to_remove_for_lm,
       to_remove_for_lm_1,x,X,x_1,X_1,X_1_for_lm,x_11,x_12,x_2,X_2,X_2_for_lm,Y,Y_1,Y_1_for_lm,Y_2,Y_2_for_lm)




##WORKING FOR SMALL ONE
cash_flows_true_reference = matrix(0,nrow=8,ncol=3)
cash_flows_true_reference[,3] = pmax((strike - stock_price[,4]),0)
step=3
system.time(while(step>1) {
  
  X_reference = c(rep(0,8))
  for (i in 1:8) if (stock_price[i,step]<strike) X_reference[i]=stock_price[i,step]
  Y_reference= discount * cash_flows_true_reference[,step]
  exercise_reference = c(rep(0,8))
  for (index in 1:8) exercise_reference[index] = pmax((strike - stock_price[index,step]),0)
  
  to_remove_for_lm = c()
  for (index in 1:8)   if (X_reference[index]==0) to_remove_for_lm = append(to_remove_for_lm, index)
  
  if(length(to_remove_for_lm)>0) Y_reference_for_lm = Y_reference[-to_remove_for_lm]
  if(length(to_remove_for_lm)>0) X_reference_for_lm = X_reference[-to_remove_for_lm]  
  
  intercept=unname(lm(Y_reference_for_lm~X_reference_for_lm + I(X_reference_for_lm^2))$coef[1])
  beta_1 = unname(lm(Y_reference_for_lm~X_reference_for_lm + I(X_reference_for_lm^2))$coef[2])
  beta_2 = unname(lm(Y_reference_for_lm~X_reference_for_lm + I(X_reference_for_lm^2))$coef[3])
  
  continuation_attempt = pmax(intercept + beta_1 * X_reference + beta_2 * X_reference**2,0)
  
  for (i in 1:8) if (continuation_attempt[i]==intercept) continuation_attempt[i]=0
  
  #cash_flow_attempt = c(rep(0,10000))
  for (index in 1:length(exercise_reference)) {
    if(exercise_reference[index] >= continuation_attempt[index]) {
      cash_flows_true_reference[index,step-1] = exercise_reference[index]
      cash_flows_true_reference[index,step] = 0}}
  
  step=step-1
}
)

sum((cash_flows_true_reference[,1]*(1+0.06)^(-1) +cash_flows_true_reference[,2]*(1+0.06)^(-2) +cash_flows_true_reference[,3]*(1+0.06)^(-3))/8)


remove(cash_flows_true_reference,X_reference,Y_reference,exercise_reference,to_remove_for_lm,Y_reference_for_lm,X_reference_for_lm,intercept, beta_1,beta_2,continuation_attempt,step)  
  
  













## ORDER 2

cash_flows_true = matrix(0,nrow=10000,ncol=126)
cash_flows_true[,126] = pmax(1*(K_Strike_126_fixed - biomass_for_options_t[,126]),0)

colSums(cash_flows_true==0) #4401
step=126
system.time(while(step>1) {
  
  X_attempt = c(rep(0,10000))
  for (i in 1:10000) if (biomass_for_options_t[i,step]<K_Strike_126_fixed) X_attempt[i]=biomass_for_options_t[i,step]
  
  discount = exp(-int_rate_vector * 1/252)
  Y_attempt= discount * cash_flows_true[,step]
  #Y_attempt = exp(-interest_rate)
  exercise_attempt = c(rep(0,10000))
  for (index in 1:10000) exercise_attempt[index] = pmax(1*(K_Strike_126_fixed - biomass_for_options_t[index,step]),0)
  
  to_remove_for_lm = c()
  for (index in 1:10000)   if (X_attempt[index]==0) to_remove_for_lm = append(to_remove_for_lm, index)
  
  if(length(to_remove_for_lm)>0) Y_attempt_for_lm = Y_attempt[-to_remove_for_lm]
  if(length(to_remove_for_lm)>0) X_attempt_for_lm = X_attempt[-to_remove_for_lm]  
  
  intercept=unname(lm(Y_attempt_for_lm~X_attempt_for_lm + I(X_attempt_for_lm^2))$coef[1])
  beta_1 = unname(lm(Y_attempt_for_lm~X_attempt_for_lm + I(X_attempt_for_lm^2))$coef[2])
  beta_2 = unname(lm(Y_attempt_for_lm~X_attempt_for_lm + I(X_attempt_for_lm^2))$coef[3])
  
  continuation_attempt = pmax(intercept + beta_1 * X_attempt + beta_2 * X_attempt**2,0)
  
  for (i in 1:10000) if (continuation_attempt[i]==intercept) continuation_attempt[i]=0
  
  #cash_flow_attempt = c(rep(0,10000))
  for (index in 1:length(exercise_attempt)) {
    if(exercise_attempt[index] >= continuation_attempt[index]) {
      cash_flows_true[index,step-1] = exercise_attempt[index]
      cash_flows_true[index,step] = 0}}
  step=step-1
}
)

#user  system elapsed 
#42.53    0.07   15.72

sum(cash_flows_true)

interest_rate

for (i in 126:0) cash_flows_true[,i] = cash_flows_true[,i] * exp(-interest_rate[i]*(126-i)/252)
sum(cash_flows_true)

100*sum(cash_flows_true)/10000 #9.843395     #same thing ran again
100*sum(cash_flows_true[,1])/10000 #984.3395  #960.2265 #same thing ran again

put_prices_american_ls_126 = cash_flows_true[,1]*100

100*(cash_flows_true[,1])

t.test(put_prices_american_ls_126) # calculated price of 960.2265  #984.3395
sd(put_prices_american_ls_126)
sd(put_prices_american_ls_126)/sqrt(10000-1) # standard error



remove(cash_flows_true,step,X_attempt,Y_attempt,exercise_attempt,to_remove_for_lm,intercept,beta_1,beta_2, continuation_attempt)







biomass_for_options_t_1y
##1 year

cash_flows_true = matrix(0,nrow=10000,ncol=252)
cash_flows_true[,252] = pmax(1*(K_Strike_126_fixed - biomass_for_options_t_1y[,252]),0)

colSums(cash_flows_true==0) #4401
step=252
system.time(while(step>1) {
  
  X_attempt = c(rep(0,10000))
  for (i in 1:10000) if (biomass_for_options_t_1y[i,step]<K_Strike_252_fixed) X_attempt[i]=biomass_for_options_t_1y[i,step]
  Y_attempt= discount * cash_flows_true[,step]
  exercise_attempt = c(rep(0,10000))
  for (index in 1:10000) exercise_attempt[index] = pmax(1*(K_Strike_252_fixed - biomass_for_options_t_1y[index,step]),0)
  
  to_remove_for_lm = c()
  for (index in 1:10000)   if (X_attempt[index]==0) to_remove_for_lm = append(to_remove_for_lm, index)
  
  if(length(to_remove_for_lm)>0) Y_attempt_for_lm = Y_attempt[-to_remove_for_lm]
  if(length(to_remove_for_lm)>0) X_attempt_for_lm = X_attempt[-to_remove_for_lm]  
  
  intercept=unname(lm(Y_attempt_for_lm~X_attempt_for_lm + I(X_attempt_for_lm^2))$coef[1])
  beta_1 = unname(lm(Y_attempt_for_lm~X_attempt_for_lm + I(X_attempt_for_lm^2))$coef[2])
  beta_2 = unname(lm(Y_attempt_for_lm~X_attempt_for_lm + I(X_attempt_for_lm^2))$coef[3])
  
  continuation_attempt = pmax(intercept + beta_1 * X_attempt + beta_2 * X_attempt**2,0)
  
  for (i in 1:10000) if (continuation_attempt[i]==intercept) continuation_attempt[i]=0
  
  #cash_flow_attempt = c(rep(0,10000))
  for (index in 1:length(exercise_attempt)) {
    if(exercise_attempt[index] >= continuation_attempt[index]) {
      cash_flows_true[index,step-1] = exercise_attempt[index]
      cash_flows_true[index,step] = 0}}
  step=step-1
}
)

#user  system elapsed 
#15.53    0.07   15.72

sum(cash_flows_true)

interest_rate

for (i in 126:0) cash_flows_true[,i] = cash_flows_true[,i] * exp(-interest_rate[i]*(126-i)/252)
sum(cash_flows_true)

100*sum(cash_flows_true)/10000 #9.843395     #same thing ran again
100*sum(cash_flows_true[,1])/10000 #984.3395  #960.2265 #same thing ran again

put_prices_american_ls_126 = cash_flows_true[,1]*100

100*(cash_flows_true[,1])

t.test(put_prices_american_ls_126) # calculated price of 960.2265  #984.3395
sd(put_prices_american_ls_126)
sd(put_prices_american_ls_126)/sqrt(10000-1) # standard error



remove(cash_flows_true,step,X_attempt,Y_attempt,exercise_attempt,to_remove_for_lm,intercept,beta_1,beta_2, continuation_attempt)













remove(cash_flow_1,cash_flow_2)





## ORDER 10


cash_flows_true_10 = matrix(0,nrow=10000,ncol=126)
cash_flows_true_10[,126] = pmax(100*(K_Strike_126_fixed - biomass_for_options_t[,126]),0)
step=126
system.time(while(step>1) {
  
  X_attempt_10 = c(rep(0,10000))
  for (i in 1:10000) if (biomass_for_options_t[i,step]<K_Strike_126_fixed) X_attempt_10[i]=biomass_for_options_t[i,step]
  Y_attempt_10= discount * cash_flows_true_10[,step]
  exercise_attempt_10 = c(rep(0,10000))
  for (index in 1:10000) exercise_attempt_10[index] = pmax(100*(K_Strike_126_fixed - biomass_for_options_t[index,step]),0)
  
  to_remove_for_lm_10 = c()
  for (index in 1:10000)   if (X_attempt_10[index]==0) to_remove_for_lm_10 = append(to_remove_for_lm_10, index)
  
  if(length(to_remove_for_lm_10)>0) Y_attempt_for_lm_10 = Y_attempt_10[-to_remove_for_lm_10]
  if(length(to_remove_for_lm_10)>0) X_attempt_for_lm_10 = X_attempt_10[-to_remove_for_lm_10]  
  
  intercept_10=unname(lm(Y_attempt_for_lm_10~X_attempt_for_lm_10 +  I(X_attempt_for_lm_10^2)+ I(X_attempt_for_lm_10^3)+ I(X_attempt_for_lm_10^4)+ I(X_attempt_for_lm_10^5)+ I(X_attempt_for_lm_10^6)+ I(X_attempt_for_lm_10^7)+ I(X_attempt_for_lm_10^8)+ I(X_attempt_for_lm_10^9))$coef[1])
  beta_1_10  = unname(lm(Y_attempt_for_lm_10~X_attempt_for_lm_10 +  I(X_attempt_for_lm_10^2)+ I(X_attempt_for_lm_10^3)+ I(X_attempt_for_lm_10^4)+ I(X_attempt_for_lm_10^5)+ I(X_attempt_for_lm_10^6)+ I(X_attempt_for_lm_10^7)+ I(X_attempt_for_lm_10^8)+ I(X_attempt_for_lm_10^9))$coef[2])
  beta_2_10  = unname(lm(Y_attempt_for_lm_10~X_attempt_for_lm_10 +  I(X_attempt_for_lm_10^2)+ I(X_attempt_for_lm_10^3)+ I(X_attempt_for_lm_10^4)+ I(X_attempt_for_lm_10^5)+ I(X_attempt_for_lm_10^6)+ I(X_attempt_for_lm_10^7)+ I(X_attempt_for_lm_10^8)+ I(X_attempt_for_lm_10^9))$coef[3])
  beta_3_10  = unname(lm(Y_attempt_for_lm_10~X_attempt_for_lm_10 +  I(X_attempt_for_lm_10^2)+ I(X_attempt_for_lm_10^3)+ I(X_attempt_for_lm_10^4)+ I(X_attempt_for_lm_10^5)+ I(X_attempt_for_lm_10^6)+ I(X_attempt_for_lm_10^7)+ I(X_attempt_for_lm_10^8)+ I(X_attempt_for_lm_10^9))$coef[4])
  beta_4_10  = unname(lm(Y_attempt_for_lm_10~X_attempt_for_lm_10 +  I(X_attempt_for_lm_10^2)+ I(X_attempt_for_lm_10^3)+ I(X_attempt_for_lm_10^4)+ I(X_attempt_for_lm_10^5)+ I(X_attempt_for_lm_10^6)+ I(X_attempt_for_lm_10^7)+ I(X_attempt_for_lm_10^8)+ I(X_attempt_for_lm_10^9))$coef[5])
  beta_5_10  = unname(lm(Y_attempt_for_lm_10~X_attempt_for_lm_10 +  I(X_attempt_for_lm_10^2)+ I(X_attempt_for_lm_10^3)+ I(X_attempt_for_lm_10^4)+ I(X_attempt_for_lm_10^5)+ I(X_attempt_for_lm_10^6)+ I(X_attempt_for_lm_10^7)+ I(X_attempt_for_lm_10^8)+ I(X_attempt_for_lm_10^9))$coef[6])
  beta_6_10  = unname(lm(Y_attempt_for_lm_10~X_attempt_for_lm_10 +  I(X_attempt_for_lm_10^2)+ I(X_attempt_for_lm_10^3)+ I(X_attempt_for_lm_10^4)+ I(X_attempt_for_lm_10^5)+ I(X_attempt_for_lm_10^6)+ I(X_attempt_for_lm_10^7)+ I(X_attempt_for_lm_10^8)+ I(X_attempt_for_lm_10^9))$coef[7])
  beta_7_10  = unname(lm(Y_attempt_for_lm_10~X_attempt_for_lm_10 +  I(X_attempt_for_lm_10^2)+ I(X_attempt_for_lm_10^3)+ I(X_attempt_for_lm_10^4)+ I(X_attempt_for_lm_10^5)+ I(X_attempt_for_lm_10^6)+ I(X_attempt_for_lm_10^7)+ I(X_attempt_for_lm_10^8)+ I(X_attempt_for_lm_10^9))$coef[8])
  beta_8_10  = unname(lm(Y_attempt_for_lm_10~X_attempt_for_lm_10 +  I(X_attempt_for_lm_10^2)+ I(X_attempt_for_lm_10^3)+ I(X_attempt_for_lm_10^4)+ I(X_attempt_for_lm_10^5)+ I(X_attempt_for_lm_10^6)+ I(X_attempt_for_lm_10^7)+ I(X_attempt_for_lm_10^8)+ I(X_attempt_for_lm_10^9))$coef[9])
  beta_9_10  = unname(lm(Y_attempt_for_lm_10~X_attempt_for_lm_10 +  I(X_attempt_for_lm_10^2)+ I(X_attempt_for_lm_10^3)+ I(X_attempt_for_lm_10^4)+ I(X_attempt_for_lm_10^5)+ I(X_attempt_for_lm_10^6)+ I(X_attempt_for_lm_10^7)+ I(X_attempt_for_lm_10^8)+ I(X_attempt_for_lm_10^9))$coef[10])
  #beta_10_10 = unname(lm(Y_attempt_for_lm_10~X_attempt_for_lm_10 +  I(X_attempt_for_lm_10^2)+ I(X_attempt_for_lm_10^3)+ I(X_attempt_for_lm_10^4)+ I(X_attempt_for_lm_10^5)+ I(X_attempt_for_lm_10^6)+ I(X_attempt_for_lm_10^7)+ I(X_attempt_for_lm_10^8)+ I(X_attempt_for_lm_10^9)+ I(X_attempt_for_lm^10))$coef[11])
  
  continuation_attempt_10 = pmax(intercept_10 + beta_1_10 * X_attempt_10 + beta_2_10 * X_attempt_10**2 + beta_3_10 * X_attempt_10**3 + beta_4_10 * X_attempt_10**4 + beta_5_10 * X_attempt_10**5 + beta_6_10 * X_attempt_10**6 + beta_7_10 * X_attempt_10**7 + beta_8_10 * X_attempt_10**8 + beta_9_10 * X_attempt_10**9,0)
  
  for (i in 1:10000) if (continuation_attempt_10[i]==intercept_10) continuation_attempt_10[i]=0
  
  cash_flow_attempt = c(rep(0,10000))
  for (index in 1:length(exercise_attempt_10)) {
    if(exercise_attempt_10[index] >= continuation_attempt_10[index]) {
      cash_flows_true_10[index,step-1] = exercise_attempt_10[index]
      cash_flows_true_10[index,step] = 0}}
  step=step-1
}
)

#user  system elapsed 
#22.61    0.07   22.63

sum(cash_flows_true_10)
for (i in 126:0) cash_flows_true_10[,i] = cash_flows_true_10[,i] * exp(-0.02*(126-i)/126)
sum(cash_flows_true_10)

sum(cash_flows_true_10)/10000 #5332.307 #same thing ran again
#2463.783      
#1006.727

remove(X_attempt_for_lm_10, cash_flows_true_10,X_attempt_10,Y_attempt_10,exercise_attempt_10,
       to_remove_for_lm_10,Y_attempt_for_lm_10,intercept_10,beta_1_10,beta_2_10,beta_3_10,beta_4_10,
       beta_5_10,beta_6_10,beta_7_10,beta_8_10,beta_9_10)






## LEAST SQUARES INDICATOR AMERICAN PUT PRICING ---- TO WORK ON 

cash_flows_true_i = matrix(0,nrow=10000,ncol=126)
for (i in 1:10000) if (K_Strike_126_fixed - biomass_for_options_t[i,126]>0) cash_flows_true_i[i,126]=1
sum(cash_flows_true_i[,126])

colSums(cash_flows_true_i==0)

step=126
system.time(while(step>1) {
  
  X_attempt_i = c(rep(0,10000))
  for (i in 1:10000) if (biomass_for_options_t[i,step]<K_Strike_126_fixed) X_attempt_i[i]=biomass_for_options_t[i,step]
  Y_attempt_i= discount * cash_flows_true_i[,step]
  exercise_attempt_i = c(rep(0,10000))
  for (index in 1:10000) if (K_Strike_126_fixed - biomass_for_options_t[index,step]>0) exercise_attempt_i[index,step]=1
  
  to_remove_for_lm_i = c()
  for (index in 1:10000)   if (X_attempt_i[index]==0) to_remove_for_lm_i = append(to_remove_for_lm_i, index)
  
  if(length(to_remove_for_lm_i)>0) Y_attempt_for_lm_i = Y_attempt_i[-to_remove_for_lm_i]
  if(length(to_remove_for_lm_i)>0) X_attempt_for_lm_i = X_attempt_i[-to_remove_for_lm_i]  
  
  intercept_i=unname(lm(Y_attempt_for_lm_i~X_attempt_for_lm_i + I(X_attempt_for_lm_i^2))$coef[1])
  beta_1_i = unname(lm(Y_attempt_for_lm_i~X_attempt_for_lm_i + I(X_attempt_for_lm_i^2))$coef[2])
  beta_2_i = unname(lm(Y_attempt_for_lm_i~X_attempt_for_lm_i + I(X_attempt_for_lm_i^2))$coef[3])
  
  continuation_attempt_i = pmax(intercept_i + beta_1_i * X_attempt_i + beta_2_i * X_attempt_i**2,0)
  
  for (i in 1:10000) if (continuation_attempt_i[i]==intercept_i) continuation_attempt_i[i]=0
  
  #cash_flow_attempt = c(rep(0,10000))
  for (index in 1:length(exercise_attempt_i)) {
    if(exercise_attempt_i[index] >= continuation_attempt_i[index]) {
      cash_flows_true_i[index,step-1] = exercise_attempt_i[index]
      cash_flows_true_i[index,step] = 0}}
  step=step-1
}
)

#user  system elapsed 
#15.53    0.07   15.72

sum(cash_flows_true)

interest_rate

for (i in 126:0) cash_flows_true[,i] = cash_flows_true[,i] * exp(-interest_rate[i]*(126-i)/252)
sum(cash_flows_true)

sum(cash_flows_true)/10000 #9.8433     #960.2265 #same thing ran again
sum(cash_flows_true[,1])/10000 #960.2265 #same thing ran again

put_prices_american_ls_126 = cash_flows_true[,1]

(cash_flows_true[,1])

t.test(put_prices_american_ls_126) # calculated price of 960.2265
sd(put_prices_american_ls_126)
sd(put_prices_american_ls_126)/sqrt(10000-1) # standard error



remove(cash_flows_true,step,X_attempt,Y_attempt,exercise_attempt,to_remove_for_lm,intercept,beta_1,beta_2, continuation_attempt)




























## ET VOILAL LEAST SQUARES AMERICAN PUT PRICING FINAL ----- 

american_least_squares_put_price_function = function(strike, stock_matrix, discount_rate, reference_paper, int_rate_vector) {
  
  n_row_sample_paths = nrow(stock_matrix)
  n_col_sample_paths = ncol(stock_matrix)-1
  
  cf = matrix(0, nrow = n_row_sample_paths, ncol = n_col_sample_paths)
  
  step = n_col_sample_paths
  if (step==n_col_sample_paths) cf[,n_col_sample_paths] = pmax(strike -stock_matrix[,n_col_sample_paths+1],0)
  
  while(step>1) {
    
    X = c(rep(0,n_row_sample_paths))
    for (i in 1:n_row_sample_paths) if (stock_matrix[i,step]<strike) X[i] = stock_matrix[i,step]
    
    if (reference_paper == 1) discount_rate = 0.9417645
    if (reference_paper == 0) discount_rate = 1/(1+int_rate_vector[step])
    #if (reference_paper == 0) discount_rate = exp(-int_rate_vector[step]*1/252)
    
    if (reference_paper == 1) Y=discount_rate * cf[,step]
    if (reference_paper == 0) Y=discount_rate * cf[,step]
    
    
    exercise = c(rep(0,n_row_sample_paths))
    for (i in 1:n_row_sample_paths) exercise[i] = pmax(strike - stock_matrix[i,step],0)
    
    to_remove_for_regression = c()
    for (i in 1:n_row_sample_paths) if (X[i]==0) to_remove_for_regression = append(to_remove_for_regression,i)
    
    if(length(to_remove_for_regression)>0) Y_for_lm = Y[-to_remove_for_regression]
    if(length(to_remove_for_regression)>0) X_for_lm = X[-to_remove_for_regression]
    
    intercept=unname(lm(Y_for_lm~X_for_lm + I(X_for_lm^2))$coef[1])
    beta_1 = unname(lm(Y_for_lm~X_for_lm + I(X_for_lm^2))$coef[2])
    beta_2 = unname(lm(Y_for_lm~X_for_lm + I(X_for_lm^2))$coef[3])
    
    continuation = pmax(intercept + beta_1 * X + beta_2 * X**2,0)
    
    for (index in 1:n_row_sample_paths) if (continuation[index]==intercept) continuation[index]=0
    
    for (index in 1:length(exercise)) {
      if(exercise[index] >= continuation[index]) {
        cf[index,step-1] = exercise[index]
        cf[index,step] = 0}}
    
    step=step-1
  }
  
  
  if (reference_paper == 1) {for (i in n_col_sample_paths:1) {cf[,i] = cf[,i] * (1+0.06)^(-i)}}
  
  #if (reference_paper == 0) {for (i in n_col_sample_paths:1) {cf[,i] = cf[,i] * exp(-int_rate_vector[i] *i/252) }}
  if (reference_paper == 0) {for (i in n_col_sample_paths:1) {cf[,i] = cf[,i] * (1+int_rate_vector[i])^(-i) }}
  
  price = sum(cf)/n_row_sample_paths
  
  return(list(option_price = price,cash_flow_matrix = cf))
  #return(price)
  
  remove(n_row_sample_paths,n_col_sample_paths,cf,step,Y,exercise,to_remove_for_regression,Y_for_lm,X_for_lm, intercept,beta_1,beta_2, continuation, stock_matrix)
  
}

american_least_squares_put_price_function_2_cont_discount = function(strike, stock_matrix, discount_rate, reference_paper, int_rate_vector) {
  
  n_row_sample_paths = nrow(stock_matrix)
  n_col_sample_paths = ncol(stock_matrix)-1
  
  cf = matrix(0, nrow = n_row_sample_paths, ncol = n_col_sample_paths)
  
  step = n_col_sample_paths
  if (step==n_col_sample_paths) cf[,n_col_sample_paths] = pmax(strike -stock_matrix[,n_col_sample_paths+1],0)
  
  while(step>1) {
    
    X = c(rep(0,n_row_sample_paths))
    for (i in 1:n_row_sample_paths) if (stock_matrix[i,step]<strike) X[i] = stock_matrix[i,step]
    
    if (reference_paper == 1) discount_rate = 0.9417645
    if (reference_paper == 0) discount_rate = 1/(1+int_rate_vector[step])
    #if (reference_paper == 0) discount_rate = exp(-int_rate_vector[step]*1/252)
    
    if (reference_paper == 1) Y=discount_rate * cf[,step]
    if (reference_paper == 0) Y=discount_rate * cf[,step]
    
    
    exercise = c(rep(0,n_row_sample_paths))
    for (i in 1:n_row_sample_paths) exercise[i] = pmax(strike - stock_matrix[i,step],0)
    
    to_remove_for_regression = c()
    for (i in 1:n_row_sample_paths) if (X[i]==0) to_remove_for_regression = append(to_remove_for_regression,i)
    
    if(length(to_remove_for_regression)>0) Y_for_lm = Y[-to_remove_for_regression]
    if(length(to_remove_for_regression)>0) X_for_lm = X[-to_remove_for_regression]
    
    intercept=unname(lm(Y_for_lm~X_for_lm + I(X_for_lm^2))$coef[1])
    beta_1 = unname(lm(Y_for_lm~X_for_lm + I(X_for_lm^2))$coef[2])
    beta_2 = unname(lm(Y_for_lm~X_for_lm + I(X_for_lm^2))$coef[3])
    
    continuation = pmax(intercept + beta_1 * X + beta_2 * X**2,0)
    
    for (index in 1:n_row_sample_paths) if (continuation[index]==intercept) continuation[index]=0
    
    for (index in 1:length(exercise)) {
      if(exercise[index] >= continuation[index]) {
        cf[index,step-1] = exercise[index]
        cf[index,step] = 0}}
    
    step=step-1
  }
  
  
  if (reference_paper == 1) {for (i in n_col_sample_paths:1) {cf[,i] = cf[,i] * (1+0.06)^(-i)}}
  
  if (reference_paper == 0) {for (i in n_col_sample_paths:1) {cf[,i] = cf[,i] * exp(-int_rate_vector[i] *i/252) }}
  #if (reference_paper == 0) {for (i in n_col_sample_paths:1) {cf[,i] = cf[,i] * (1+int_rate_vector[i])^(-i) }}
  
  price = sum(cf)/n_row_sample_paths
  
  return(list(option_price = price,cash_flow_matrix = cf))
  #return(price)
  
  remove(n_row_sample_paths,n_col_sample_paths,cf,step,Y,exercise,to_remove_for_regression,Y_for_lm,X_for_lm, intercept,beta_1,beta_2, continuation, stock_matrix)
    
}



american_least_squares_put_price_function(1.1, stock_price,discount_rate = discount, reference_paper = 1)

t.test(american_least_squares_put_price_function(1.1, stock_price,discount_rate = discount, reference_paper = 1)$cash_flow_matrix)

system.time(print(american_least_squares_put_price_function(K_Strike_126_fixed, biomass_for_options_t, int_rate_vector = interest_rate, reference_paper = 0)$option_price)) #nice number, 393





system.time(print(american_least_squares_put_price_function(K_Strike_252_fixed, biomass_for_options_t_1y, int_rate_vector = interest_rate_1y, reference_paper = 0)$option_price)) #971
system.time(print(american_least_squares_put_price_function_2_cont_discount(K_Strike_252_fixed, biomass_for_options_t_1y, int_rate_vector = interest_rate_1y, reference_paper = 0)$option_price)) #1019


biomass_for_options_t_american_once <- as.data.frame(t(replicate(10000, euler_approx_sln(10,1/252,sigma_1=0.3,min_K=0.4, K=K1,r=r1,q=q1,effort=1,correlation = 0, T=0.5), simplify = TRUE)))



system.time(print(american_least_squares_put_price_function(K_Strike_126_fixed, as.data.frame(t(replicate(10000, euler_approx_sln(10,1/252,sigma_1=0.3,min_K=0.4, K=K1,r=r1,q=q1,effort=1,correlation = 0, T=0.5), simplify = TRUE))), int_rate_vector = interest_rate, reference_paper = 0)$option_price)) #397!! bout 45 seconds!


amer_ls_6m_price = american_least_squares_put_price_function(K_Strike_126_fixed, biomass_for_options_t, int_rate_vector = interest_rate, reference_paper = 0)

colSums(amer_ls_6m_price$cash_flow_matrix ==0)
view(amer_ls_6m_price$cash_flow_matrix)





system.time(amer_options <- replicate(4, american_least_squares_put_price_function(K_Strike_126_fixed, biomass_for_options_t, int_rate_vector = interest_rate, reference_paper = 1)$option_price))

#[1] 3.937366
#user  system elapsed 
#43.34    0.08   43.55

american_least_squares_put_price_function(K_Strike_126_fixed, biomass_for_options_t, int_rate_vector = interest_rate, reference_paper = 0) #397!! bout 45 seconds!



american_least_squares_put_price_function(K_Strike_252_fixed, biomass_for_options_t_1y, int_rate_vector = interest_rate_1y, reference_paper = 0) #971






system.time(american_option_least_squares_price <- replicate (5, american_least_squares_put_price_function(K_Strike_126_fixed, as.data.frame(t(replicate(10000,  euler_approx_sln(10,1/252,sigma_1=0.3,min_K=0.4, K=K1,r=r1,q=q1,effort=1,correlation = 0, T=0.5),  simplify = TRUE))), int_rate_vector = interest_rate, reference_paper = 0)$option_price)) #397!! bout 45 seconds!
#user  system elapsed 
#220.92    0.42  221.93 

american_option_least_squares_price=american_option_least_squares_price*100

american_option_least_squares_price_statistics = t.test(american_option_least_squares_price)
american_option_least_squares_price_statistics$estimate
american_option_least_squares_price_statistics$conf.int
american_option_least_squares_price_statistics$stderr

american_option_least_squares_price_statistics$conf.int[1]/american_option_least_squares_price_statistics$estimate-1


system.time(american_option_least_squares_price_252 <- replicate (5, american_least_squares_put_price_function(K_Strike_252_fixed, as.data.frame(t(replicate(10000,  euler_approx_sln(10,1/252,sigma_1=0.05,min_K=0.4, K=K1,r=r1,q=q1,effort=1,correlation = 0, T=1),  simplify = TRUE))), int_rate_vector = interest_rate_1y, reference_paper = 0)$option_price)) #397!! bout 45 seconds!


american_option_least_squares_price_statistics_252 = t.test(american_option_least_squares_price_252)
american_option_least_squares_price_statistics_252$estimate
100*american_option_least_squares_price_statistics_252$conf.int
100*american_option_least_squares_price_statistics_252$stderr

american_option_least_squares_price_statistics_252$conf.int[1]/american_option_least_squares_price_statistics_252$estimate-1



#user  system elapsed 
#467.33    0.21  468.04 







K_Strike_126_fixed
stock_matrix = biomass_for_options_t
int_rate_vector = interest_rate
reference_paper=0

american_least_squares_put_price_function_indicator = function(strike, stock_matrix, discount_rate, reference_paper, int_rate_vector) {
  
  n_row_sample_paths = nrow(stock_matrix)
  n_col_sample_paths = ncol(stock_matrix)-1
  
  cf = matrix(0, nrow = n_row_sample_paths, ncol = n_col_sample_paths)
  strike=1.1
  step = n_col_sample_paths
  if (step==n_col_sample_paths) cf[,n_col_sample_paths] = pmax(strike -stock_matrix[,n_col_sample_paths+1],0)
  if (step==n_col_sample_paths) for (i in 1:n_row_sample_paths) if(cf[i,n_col_sample_paths]!=0) cf[i,n_col_sample_paths]=1
   
  
  
  while(step>1) {
    
    X = c(rep(0,n_row_sample_paths))
    for (i in 1:n_row_sample_paths) if (stock_matrix[i,step]<strike) X[i] = stock_matrix[i,step]
    
    if (reference_paper == 1) discount_rate = 0.9417645
    if (reference_paper == 0) discount_rate = 1/(1+int_rate_vector[step])
    #if (reference_paper == 0) discount_rate = exp(-int_rate_vector[step]*1/252)
    
    if (reference_paper == 1) Y=discount_rate * cf[,step]
    if (reference_paper == 0) Y=discount_rate * cf[,step]
    
    
    exercise = c(rep(0,n_row_sample_paths))
    for (i in 1:n_row_sample_paths) exercise[i] = pmax(strike - stock_matrix[i,step],0)
    for (i in 1:n_row_sample_paths) if(exercise[i]!=0) exercise[i]=1
    
    to_remove_for_regression = c()
    for (i in 1:n_row_sample_paths) if (X[i]==0) to_remove_for_regression = append(to_remove_for_regression,i)
    
    if(length(to_remove_for_regression)>0) Y_for_lm = Y[-to_remove_for_regression]
    if(length(to_remove_for_regression)>0) X_for_lm = X[-to_remove_for_regression]
    
    intercept=unname(lm(Y_for_lm~X_for_lm + I(X_for_lm^2))$coef[1])
    beta_1 = unname(lm(Y_for_lm~X_for_lm + I(X_for_lm^2))$coef[2])
    beta_2 = unname(lm(Y_for_lm~X_for_lm + I(X_for_lm^2))$coef[3])
    
    continuation = pmax(intercept + beta_1 * X + beta_2 * X**2,0)
    
    for (index in 1:n_row_sample_paths) if (continuation[index]==intercept) continuation[index]=0
    
    for (index in 1:length(exercise)) {
      if(exercise[index] >= continuation[index]) {
        cf[index,step-1] = exercise[index]
        cf[index,step] = 0}}
    
    step=step-1
  }
  
  
  if (reference_paper == 1) {for (i in n_col_sample_paths:1) {cf[,i] = cf[,i] * (1+0.06)^(-i)}}
  
  #if (reference_paper == 0) {for (i in n_col_sample_paths:1) {cf[,i] = cf[,i] * exp(-int_rate_vector[i] *i/252) }}
  if (reference_paper == 0) {for (i in n_col_sample_paths:1) {cf[,i] = cf[,i] * (1+int_rate_vector[i])^(-i) }}
  
  price = sum(cf)/n_row_sample_paths
  
  return(list(option_price = price,cash_flow_matrix = cf))
  #return(price)
  
  remove(n_row_sample_paths,n_col_sample_paths,cf,step,Y,exercise,to_remove_for_regression,Y_for_lm,X_for_lm, intercept,beta_1,beta_2, continuation, stock_matrix)
  
}



american_least_squares_put_price_function_indicator(1.1, stock_price,discount_rate = discount, reference_paper = 1)

system.time(print(american_least_squares_put_price_function_indicator(K_Strike_126_fixed, biomass_for_options_t, int_rate_vector = interest_rate, reference_paper = 0)$option_price)) #nice number, 393















## AMERICAN PUT OPTION USING LEAST SQUARES SENSITIVITY ANALYSIS -----



##sigma_sensitivity

a_put_prices_sigma_2 = c()
a_sigma_2 = c()

system.time(
for (index in 1:60) {
a_sigma_2 = append(a_sigma_2, index/100)
a_put_prices_sigma_2 = append(a_put_prices_sigma_2, american_least_squares_put_price_function(K_Strike_126_fixed, as.data.frame(t(replicate(10000, euler_approx_sln(10,1/252,sigma_1=index/100,min_K=0.4, K=K1,r=r1,q=q1,effort=1,correlation = 0, T=0.5), simplify = TRUE))), int_rate_vector = interest_rate, reference_paper = 0)$option_price)
})


14:12

#user  system elapsed 
#3791.95    1.11 3832.19 

plot(a_sigma_2,100*a_put_prices_sigma_2, type ="l")


#single_option_paths = subset( single_option_paths, select = -c(1) )

a_sigma =a_sigma[1:60]
a_put_prices_sigma = a_put_prices_sigma[1:60]

plot(a_sigma, 100*a_put_prices_sigma, type = "l")


#16:05
#user  system elapsed 
#3094.96    0.76 3098.78 
a_put_prices_sigma
t.test(a_put_prices_sigma)

plot(a_sigma,a_put_prices_sigma, type = "l")

a_sigma_2[30]

percentage_change_a_s_price = c()
for (i in 1:60) percentage_change_a_s_price = append(percentage_change_a_s_price, a_put_prices_sigma_2[i]/a_put_prices_sigma_2[30]-1)


plot(a_sigma_2, percentage_change_a_s_price, type = "l", main = "Relative Change in the American LS Put Price w.r.t. Sigma, Sigma 30% = No Change", xlab = expression("Sigma " (sigma)), ylab = "Relative Change in the Put Price (%)")

percentage_change_a_s_sigma = c()
for (i in 1:60) percentage_change_a_s_sigma = append(percentage_change_a_s_sigma, a_sigma_2[i]/a_sigma_2[30]-1)


a_sigma_df2= data.frame("relative_change_in_sigma" = 100*percentage_change_a_s_sigma, "relative_change_in_price" = 100*percentage_change_a_s_price)

plot(a_sigma_df2$relative_change_in_sigma, a_sigma_df2$relative_change_in_price, type = "l")

ggplot(a_sigma_df2) + 
  geom_line(aes(x=relative_change_in_sigma, y=relative_change_in_price)) +
  labs(y = "Relative change (%) in the put price", 
       x = expression(atop("\n Relative change (%) in sigma", "Sigma " (sigma)))) +
  ggtitle(expression('Figure 7: Sensitivity analysis of American put price w.r.t. sigma '(sigma)*'; '*sigma[0]*'=30%')) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  theme(panel.background = element_blank(), axis.line=element_line(colour = "black")) +
  theme(axis.text.x = element_text(size=11), axis.text.y = element_text(size=11)) +
  scale_x_continuous(breaks = seq(-100,100,50), labels = c("-100 \n 0.0", "-50 \n 0.15","0 \n 0.30","50 \n 0.45", "100 \n 0.60")) 
  


put_prices_126_sigma_sensitivity_graph_data = data.frame("relative_change_in_sigma" = 100*put_prices_sigma_sensitivity_df$percentage_change_sigma_value,
                                                         "relative_change_in_price" = 100*put_prices_sigma_sensitivity_df$percentage_change_sigma_price)


ggplot(put_prices_126_sigma_sensitivity_graph_data) + 
  geom_line(aes(x=relative_change_in_sigma, y=relative_change_in_price)) +
  theme_bw() +
  labs(y = "Relative change (%) in the put price", 
       x = expression(atop("\n Relative change (%) in sigma", "Sigma " (sigma)))) +
  ggtitle(expression('Figure 7: Sensitivity analysis of European put price w.r.t. sigma '(sigma)*'; '*sigma[0]*'=30%')) +
  scale_x_continuous(breaks = seq(-100,100,50), labels = c("-100 \n 0.0", "-50 \n 0.15","0 \n 0.30","50 \n 0.45", "100 \n 0.60")) +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  theme(panel.background = element_blank(), axis.line=element_line(colour = "black")) +
  theme(axis.text.x = element_text(size=11), axis.text.y = element_text(size=11))














a_put_prices_growth_2 = c()
a_growth_2 = c()

system.time(
  for (index in 0:140) {
    a_growth_2 = append(a_growth_2, index/100)
    a_put_prices_growth_2 = append(a_put_prices_growth_2, american_least_squares_put_price_function(K_Strike_126_fixed, as.data.frame(t(replicate(10000, euler_approx_sln(10,1/252,sigma_1=0.30,min_K=0.4, K=K1,r=index/100,q=q1,effort=1,correlation = 0, T=0.5), simplify = TRUE))), int_rate_vector = interest_rate, reference_paper = 0)$option_price)
  })
#Ran it at 17:05
#200 reps at 45 seconds each =>> 9000 seconds => 150 minutes => 19:35

#user  system elapsed 
#9460.92    4.96 9487.73 

plot(a_growth, a_put_prices_growth, type = "l",  main = "Relative Change in the American LS Put Price w.r.t. Sigma, Growth 71% = No Change", xlab = "Growth", ylab = "Relative Change in the Put Price (%)")

a_growth[171]

percentage_change_a_g_2 = c()
for (i in 1:201) percentage_change_a_g_2 = append(percentage_change_a_g_2, a_put_prices_growth_2[i]/a_put_prices_growth_2[171]-1)

a_growth_df = data.frame("growth_rate" = a_growth,
                         "relative_price_change" = 100*percentage_change_a_g)

ggplot(a_growth_df) + 
  geom_line(aes(x=growth_rate, y=relative_price_change)) +
  labs(y = "Relative change (%) in the put price", 
       x = expression(atop("\n Relative change (%) in the growth rate", "Growth rate (g)"))) +
  ggtitle(expression("Figure 8: Senstivity analysis of American put price w.r.t. growth rate (g); g" [0]*"=70%"))  +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
  theme(panel.background = element_blank(), axis.line=element_line(colour = "black")) +
  theme(axis.text.x = element_text(size=11), axis.text.y = element_text(size=11)) +
  scale_x_continuous(breaks = seq(-1,1,0.5), labels = c("-100 \n 0.0", "-50 \n 0.35","0 \n 0.70","50 \n 1.05", "100 \n 1.40"))












a_put_prices_q = c()
a_q = c()
    
q = 0.00010
  
    
system.time(
  for (index in 1:40) {
    a_q = append(a_q, index/100000)
    a_put_prices_q = append(a_put_prices_q, american_least_squares_put_price_function(K_Strike_126_fixed, as.data.frame(t(replicate(10000, euler_approx_sln(10,1/252,sigma_1=0.30,min_K=0.4, K=K1,r=0.71,q=index/200000,effort=1,correlation = 0, T=0.5), simplify = TRUE))), int_rate_vector = interest_rate, reference_paper = 0)$option_price)
  })

#user  system elapsed 
#1775.57    0.36 1777.41 

plot(a_q,a_put_prices_q, type = "l")

percentage_change_a_s = c()
for (i in 1:70) percentage_change_a_s = append(percentage_change_a_s, a_put_prices_sigma[i]/a_put_prices_sigma[30]-1)













